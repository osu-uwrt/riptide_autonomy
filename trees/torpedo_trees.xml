<?xml version="1.0"?>
<root main_tree_to_execute="BehaviorTree">
    <!-- ////////// -->
    <BehaviorTree ID="BehaviorTree">
        <Fallback>
            <Sequence>
                <Action ID="Info" message="Arming torpedos."/>
                <SubTree ID="GetActuatorStates" __shared_blackboard="true"/>
                <IfThenElse>
                    <Inverter name="If NOT torpedo charged...">
                        <Sequence>
                            <SubTree ID="IsTorpedoChargedOrError" __shared_blackboard="false" torpedo_id="1" torpedo_state="torpedo1_state"/>
                            <Condition ID="IsTorpedoCharged" torpedo_state="{torpedo2_state}"/>
                        </Sequence>
                    </Inverter>
                    <RetryUntilSuccessful name="Arm Torpedos if not armed" num_attempts="4">
                        <Sequence>
                            <Action ID="ActuateState" arm_torpedo="1" clear_dropper_status="" close_claw="" disarm_torpedo="" drop_1="" drop_2="" fire_torpedo_1="" fire_torpedo_2="" name="Arm Torpedos" open_claw="" reset_actuators=""/>
                            <SubTree ID="GetActuatorStates" __shared_blackboard="true"/>
                            <Condition ID="IsTorpedoCharging" name="If false (FAILURE), will cause sequence to fail and be restarted" torpedo_state="{torpedo1_state}"/>
                            <Condition ID="IsTorpedoCharging" torpedo_state="{torpedo2_state}"/>
                        </Sequence>
                    </RetryUntilSuccessful>
                    <AlwaysSuccess/>
                </IfThenElse>
                <Sequence>
                    <Action ID="Info" message="Charging torpedos."/>
                    <Fallback>
                        <Decorator ID="RetryUntilSuccessfulOrTimeout" num_seconds="45">
                            <Sequence>
                                <SubTree ID="GetActuatorStates" __shared_blackboard="true"/>
                                <Condition ID="IsTorpedoCharged" torpedo_state="{torpedo1_state}"/>
                                <Condition ID="IsTorpedoCharged" torpedo_state="{torpedo2_state}"/>
                            </Sequence>
                        </Decorator>
                        <Action ID="Error" message="Timed out charging torpedos."/>
                    </Fallback>
                </Sequence>
            </Sequence>
            <Action ID="Error" message="Failed to arm torpedos!"/>
        </Fallback>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="GetActuatorStates">
        <RetryUntilSuccessful num_attempts="4">
            <Fallback>
                <Action ID="GetActuatorStatus" claw_state="{claw_state}" dropper1_state="{dropper1_state}" dropper2_state="{dropper2_state}" torpedo1_state="{torpedo1_state}" torpedo2_state="{torpedo2_state}"/>
                <ForceFailure name="Force fallback to fail">
                    <Action ID="Error" message="Failed to get actuator status!"/>
                </ForceFailure>
            </Fallback>
        </RetryUntilSuccessful>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="IsTorpedoChargedOrError">
        <Fallback>
            <Condition ID="IsTorpedoCharged" torpedo_state="{torpedo_state}"/>
            <Sequence>
                <Condition ID="IsTorpedoError" torpedo_state="{torpedo_state}"/>
                <Action ID="ToString" double_in="" int_in="{torpedo_id}" str_out="{torpedo_id_str}"/>
                <Action ID="Error" message="One or more torpedos are in error state."/>
            </Sequence>
        </Fallback>
    </BehaviorTree>
    <!-- ////////// -->
    <TreeNodesModel>
        <Action ID="ActuateState">
            <input_port name="arm_torpedo"/>
            <input_port name="clear_dropper_status"/>
            <input_port name="close_claw"/>
            <input_port name="disarm_torpedo"/>
            <input_port name="drop_1"/>
            <input_port name="drop_2"/>
            <input_port name="fire_torpedo_1"/>
            <input_port name="fire_torpedo_2"/>
            <input_port name="open_claw"/>
            <input_port name="reset_actuators"/>
        </Action>
        <Action ID="BigMoveState">
            <input_port default="1" name="orientation_w">optional</input_port>
            <input_port default="0" name="orientation_x">optional</input_port>
            <input_port default="0" name="orientation_y">optional</input_port>
            <input_port default="0" name="orientation_z">optional</input_port>
            <input_port name="v_pitch">optional</input_port>
            <input_port name="v_roll">optional</input_port>
            <input_port name="v_yaw">optional</input_port>
            <input_port default="0" name="x">optional</input_port>
            <input_port default="0" name="y">optional</input_port>
            <input_port default="-1" name="z">optional</input_port>
        </Action>
        <Action ID="Error">
            <input_port name="message">The message to print.</input_port>
        </Action>
        <Action ID="FlattenCalculationState">
            <input_port default="-1" name="depth">Depth the robot sinks to. Required</input_port>
            <output_port default="1" name="orientation_w"/>
            <output_port default="0" name="orientation_x"/>
            <output_port default="0" name="orientation_y"/>
            <output_port default="0" name="orientation_z"/>
            <output_port default="0" name="x"/>
            <output_port default="0" name="y"/>
            <output_port default="-1" name="z"/>
        </Action>
        <SubTree ID="GetActuatorStates">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <Action ID="GetActuatorStatus">
            <output_port name="claw_state"/>
            <output_port name="dropper1_state"/>
            <output_port name="dropper2_state"/>
            <output_port name="torpedo1_state"/>
            <output_port name="torpedo2_state"/>
        </Action>
        <Action ID="Info">
            <input_port name="message">The message to print.</input_port>
        </Action>
        <Condition ID="IsClawClosed">
            <input_port name="claw_state"/>
        </Condition>
        <Condition ID="IsClawOpen">
            <input_port name="claw_state"/>
        </Condition>
        <Condition ID="IsClawUnknown">
            <input_port name="claw_state"/>
        </Condition>
        <Condition ID="IsDropperDropped">
            <input_port name="dropper_state"/>
        </Condition>
        <Condition ID="IsDropperReady">
            <input_port name="dropper_state"/>
        </Condition>
        <Condition ID="IsTorpedoCharged">
            <input_port name="torpedo_state"/>
        </Condition>
        <SubTree ID="IsTorpedoChargedOrError">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="torpedo_id"/>
            <input_port name="torpedo_state"/>
        </SubTree>
        <Condition ID="IsTorpedoCharging">
            <input_port name="torpedo_state"/>
        </Condition>
        <Condition ID="IsTorpedoError">
            <input_port name="torpedo_state"/>
        </Condition>
        <Condition ID="IsTorpedoFired">
            <input_port name="torpedo_state"/>
        </Condition>
        <Decorator ID="RetryUntilSuccessfulOrTimeout">
            <input_port name="num_seconds">number of seconds until abandonment.</input_port>
        </Decorator>
        <Action ID="SearchState">
            <input_port name="frame">The frame to search for</input_port>
            <input_port name="target_error">The goal amount of error for the state to succeed.</input_port>
            <input_port name="update_sec">How much time to wait for update</input_port>
        </Action>
        <Action ID="ShootTorpedoState"/>
        <Action ID="ToString">
            <input_port name="double_in">optional. use if value is a double</input_port>
            <input_port name="int_in">optional. use if value is a string</input_port>
            <output_port name="str_out">output.</output_port>
        </Action>
        <Action ID="ToWorldFrameState">
            <input_port name="object">Object to calculate relative to. Required.</input_port>
            <input_port name="relative_orientation_w">Orienation is relative to object. Required.</input_port>
            <input_port name="relative_orientation_x">Required</input_port>
            <input_port name="relative_orientation_y">Required</input_port>
            <input_port name="relative_orientation_z">Required</input_port>
            <input_port name="relative_x">Position is also relative to object. Required.</input_port>
            <input_port name="relative_y">Required</input_port>
            <input_port name="relative_z">Required</input_port>
            <output_port name="world_orientation_w"/>
            <output_port name="world_orientation_x"/>
            <output_port name="world_orientation_y"/>
            <output_port name="world_orientation_z"/>
            <output_port name="world_x"/>
            <output_port name="world_y"/>
            <output_port name="world_z"/>
        </Action>
        <Action ID="VelocityState">
            <input_port default="1" name="time">Time to drive for. Required</input_port>
            <input_port default="1" name="x_velocity">Required</input_port>
            <input_port default="0" name="y_velocity">Required</input_port>
            <input_port default="0" name="z_velocity">Required</input_port>
        </Action>
        <Action ID="WaitState">
            <input_port name="seconds">number of seconds to wait.</input_port>
        </Action>
    </TreeNodesModel>
    <!-- ////////// -->
</root>

