<?xml version="1.0"?>
<root main_tree_to_execute="BehaviorTree">
    <BehaviorTree ID="AlignLink">
        <Sequence name="align torpedos">
            <Action ID="TransformPose" from_frame="{frame_name}" op="0" or="0" out_op="op" out_or="or" out_oy="oy" out_x="obj_x" out_y="obj_y" out_z="obj_z" oy="3.1415" to_frame="world" x="{prox_x}" y="0" z="{prox_z}"/>
            <Action ID="ComputeFrameAlignment" op="{op}" or="{or}" out_op="gop" out_or="gor" out_oy="goy" out_x="gx" out_y="gy" out_z="gz" oy="{oy}" reference_frame="world" target_frame="{link_name}" x="{obj_x}" y="{obj_y}" z="{obj_z}"/>
            <SubTree ID="Move" __shared_blackboard="false" op="gop" or="gor" oy="goy" x="gx" y="gy" z="gz"/>
        </Sequence>
    </BehaviorTree>
    <BehaviorTree ID="BehaviorTree">
        <Sequence name="TORPEDO">
            <SetBlackboard output_key="-1" value="-1"/>
            <SubTree ID="WaitForKillSwitch"/>
            <Action ID="SetStatus" status="moving"/>
            <SubTree ID="Dive" __shared_blackboard="false" depth="-1"/>
            <SubTree ID="TorpedoTree"/>
            <SubTree ID="KillController"/>
        </Sequence>
    </BehaviorTree>
    <BehaviorTree ID="BinTree">
        <Sequence name="BINS">
            <SetBlackboard output_key="0.25" value="0.25"/>
            <SetBlackboard output_key="0" value="0"/>
            <SetBlackboard output_key="1" value="1"/>
            <SetBlackboard output_key="object" value="bin"/>
            <Action ID="Format" format="{object}_frame" out="object_frame"/>
            <SetBlackboard output_key="target_err" value="0.01"/>
            <SetBlackboard output_key="search_timeout" value="180"/>
            <Action ID="Info" message="BIN TIME"/>
            <ForceSuccess>
                <SubTree ID="DownwardSearch" __shared_blackboard="false" min_dist="1" object_name="object" target_cov="target_err" timeout_sec="search_timeout"/>
            </ForceSuccess>
            <Action ID="SetStatus" status="aligning"/>
            <SubTree ID="RelativeMove" __shared_blackboard="false" frame_name="object_frame" op="0" or="0" oy="0" x="0" y="0" z="1"/>
            <SubTree ID="RelativeMove" __shared_blackboard="false" frame_name="object_frame" op="0" or="0" oy="0" x="0" y="0" z="0.25"/>
            <Action ID="SetStatus" status="performing"/>
            <SubTree ID="SetActuatorsArmed" __shared_blackboard="false" armed="1"/>
            <Repeat num_cycles="2">
                <SubTree ID="FireDropper"/>
            </Repeat>
            <SubTree ID="SetActuatorsArmed" __shared_blackboard="false" armed="0"/>
        </Sequence>
    </BehaviorTree>
    <BehaviorTree ID="BumpObject">
        <Sequence>
            <SetBlackboard output_key="60" value="60"/>
            <Action ID="GetOdometry" op="" or="" oy="" x="orig_x" y="orig_y" z="orig_z"/>
            <Sequence name="bump setup and alignment">
                <SetBlackboard output_key="0.5" value="0.5"/>
                <SetBlackboard output_key="5" value="5"/>
                <SetBlackboard output_key="-0.25" value="-0.25"/>
                <SetBlackboard output_key="poker_link" value="talos/poker_link"/>
                <SetBlackboard output_key="1" value="1"/>
                <SetBlackboard output_key="talos/poker_link" value="talos/poker_link"/>
                <SetBlackboard output_key="0" value="0"/>
                <Action ID="SetStatus" status="aligning"/>
                <SubTree ID="AlignLink" __shared_blackboard="false" allignment="1" frame_name="object_frame" link_name="poker_link" prox_x="1" prox_z="0"/>
                <Action ID="Wait" seconds="5"/>
                <Action ID="SetStatus" status="performing"/>
                <SetBlackboard output_key="proximity" value="0.5"/>
            </Sequence>
            <ForceSuccess>
                <Repeat name="align and bump" num_cycles="12">
                    <Sequence>
                        <Action ID="Info" message="ALIGNING WITH PROX {proximity}"/>
                        <Action ID="TransformPose" from_frame="{object_frame}" op="0" or="0" out_op="fop" out_or="for" out_oy="foy" out_x="fx" out_y="fy" out_z="fz" oy="3.1415" to_frame="world" x="{proximity}" y="0" z="0"/>
                        <Action ID="ComputeFrameAlignment" op="{fop}" or="{for}" out_op="" out_or="" out_oy="" out_x="bx" out_y="by" out_z="bz" oy="{foy}" reference_frame="world" target_frame="{poker_link}" x="{fx}" y="{fy}" z="{fz}"/>
                        <SubTree ID="PrimitiveMovePosition" __shared_blackboard="false" timeout="5" x="bx" y="by" z="bz"/>
                        <Action ID="Math" a="{proximity}" b="0.125" operator="-" out="proximity"/>
                        <Action ID="Info" message="PROX NOW {proximity}"/>
                    </Sequence>
                </Repeat>
            </ForceSuccess>
            <SubTree ID="PrimitiveMovePosition" __shared_blackboard="false" timeout="60" x="orig_x" y="orig_y" z="orig_z"/>
        </Sequence>
    </BehaviorTree>
    <BehaviorTree ID="BuoyTree">
        <Sequence name="buoy">
            <SetBlackboard output_key="3.1415" value="3.1415"/>
            <SetBlackboard output_key="0" value="0"/>
            <SetBlackboard output_key="1.75" value="1.75"/>
            <SetBlackboard output_key="4.0" value="4.0"/>
            <SetBlackboard output_key="circ_radius" value="3"/>
            <SetBlackboard output_key="iscw" value="1"/>
            <SetBlackboard output_key="target_cov" value="3"/>
            <SetBlackboard output_key="search_time" value="180"/>
            <SetBlackboard output_key="prop" value="buoy"/>
            <Action ID="Format" format="{prop}_frame" out="prop_frame"/>
            <SubTree ID="Search" __shared_blackboard="false" max_dist="4.0" min_dist="1.75" object_name="prop" target_cov="target_cov" timeout_secs="search_time"/>
            <Action ID="Info" message="BUOY TIME"/>
            <Action ID="SetStatus" name="set status to aligning" status="aligning"/>
            <IfThenElse name="which way we goin">
                <Condition ID="CompareNums" a="{iscw}" b="0" name="what is the value" test="=="/>
                <SetBlackboard output_key="circ_y" value="-1"/>
                <SetBlackboard output_key="circ_y" value="1"/>
            </IfThenElse>
            <Action ID="Math" a="{circ_y}" b="{circ_radius}" name="multiply by radius to get actual y" operator="*" out="{circ_y}"/>
            <Action ID="Info" message="Lining up with buoy"/>
            <SubTree ID="RelativeMove" __shared_blackboard="false" frame_name="prop_frame" name="" op="0" or="0" oy="3.1415" x="circ_radius" y="0" z="0"/>
            <Action ID="SetStatus" name="performing" status="performing"/>
            <SubTree ID="RelativeMove" __shared_blackboard="false" frame_name="prop_frame" name="" op="0" or="0" oy="3.1415" x="0" y="circ_y" z="0"/>
            <Action ID="Math" a="{circ_radius}" b="-1" name="get behind buoy x" operator="*" out="n_circ_radius"/>
            <SubTree ID="RelativeMove" __shared_blackboard="false" frame_name="prop_frame" name="" op="0" or="0" oy="3.1415" x="n_circ_radius" y="0" z="0"/>
            <Action ID="Math" a="{circ_y}" b="-1" name="get other side of buoy y" operator="*" out="n_circ_y"/>
            <SubTree ID="RelativeMove" __shared_blackboard="false" frame_name="prop_frame" name="" op="0" or="0" oy="3.1415" x="0" y="n_circ_y" z="0"/>
            <SubTree ID="RelativeMove" __shared_blackboard="false" frame_name="prop_frame" name="" op="0" or="0" oy="3.1415" x="circ_radius" y="0" z="0"/>
            <Action ID="SetStatus" name="moving to better spot" status="moving"/>
            <SubTree ID="RelativeMove" __shared_blackboard="false" frame_name="prop_frame" name="" op="0" or="0" oy="3.1415" x="0" y="circ_y" z="0"/>
        </Sequence>
    </BehaviorTree>
    <BehaviorTree ID="CheckActuatorStates">
        <Sequence>
            <Action ID="GetActuatorStatus" actuators_busy="" claw_state="clawstate" dropper_available_count="" dropper_state="dropperstate" torpedo_available_count="" torpedo_state="torpedostate"/>
            <Fallback>
                <Sequence name="Check states">
                    <Inverter name="dropperstate not error">
                        <Condition ID="CompareNums" a="{dropperstate}" b="0" test="=="/>
                    </Inverter>
                    <Inverter name="torpedostate not error">
                        <Condition ID="CompareNums" a="{torpedostate}" b="0" test="=="/>
                    </Inverter>
                </Sequence>
                <ForceFailure>
                    <Action ID="Error" message="Check Actuators! States are problematic; dropper: {dropperstate}, torpedo: {torpedostate}"/>
                </ForceFailure>
            </Fallback>
        </Sequence>
    </BehaviorTree>
    <BehaviorTree ID="CollectDetsAtAngle">
        <Sequence>
            <Action ID="Info" message="collecting dets at angle offset {rel_yaw}"/>
            <SetBlackboard output_key="15" value="15"/>
            <SetBlackboard output_key="0" value="0"/>
            <Action ID="Math" a="{rel_yaw}" b="3.1415" operator="+" out="{frame_yaw}"/>
            <Action Covariance="{cov_at_start}" ID="getCovariance" Target="{target}"/>
            <Condition ID="CompareNums" a="{cov_at_start}" b="{target_error}" name="break early if we found it" test="&gt;"/>
            <Action ID="TransformPose" from_frame="{frame}" op="0" or="0" out_op="" out_or="" out_oy="goy" out_x="gx" out_y="gy" out_z="gz" oy="{frame_yaw}" to_frame="world" x="0" y="0" z="0"/>
            <Action Covariance="{curr_error}" ID="getCovariance" Target="{target}"/>
            <Inverter name="Is target error already there?">
                <Condition ID="CompareNums" a="{curr_error}" b="{target_error}" test="&lt;"/>
            </Inverter>
            <SubTree ID="PrimitiveMoveOrientation" __shared_blackboard="false" p="0" r="0" timeout="15" y="goy"/>
            <Repeat name="Wait and eval dets" num_cycles="5">
                <Parallel failure_threshold="1" name="Grab detections" success_threshold="2">
                    <Action ID="WaitForDetection" object_name="{target}" timeout_secs="2"/>
                    <Sequence name="Wait and report error">
                        <Action ID="Wait" seconds="2"/>
                        <Action Covariance="cov" ID="getCovariance" Target="{target}"/>
                        <Action ID="Info" message="Object {target} has error  {cov}"/>
                    </Sequence>
                </Parallel>
            </Repeat>
        </Sequence>
    </BehaviorTree>
    <BehaviorTree ID="Dive">
        <Sequence>
            <SetBlackboard output_key="15" value="15"/>
            <SetBlackboard output_key="60" value="60"/>
            <SetBlackboard output_key="10" value="10"/>
            <SetBlackboard output_key="30" value="30"/>
            <SetBlackboard output_key="0" value="0"/>
            <Action ID="GetOdometry" op="{op}" or="{or}" oy="{oy}" x="{x}" y="{y}" z="{z}"/>
            <Action ID="PublishToController" isOrientation="1" mode="3" x="0" y="0" z="{oy}"/>
            <SubTree ID="PrimitiveMovePosition" __shared_blackboard="false" timeout="60" x="x" y="y" z="depth"/>
            <SubTree ID="PrimitiveMoveOrientation" __shared_blackboard="false" p="0" r="0" timeout="15" y="oy"/>
        </Sequence>
    </BehaviorTree>
    <BehaviorTree ID="DownwardMove">
        <Sequence>
            <SetBlackboard output_key="0" value="0"/>
            <Action Covariance="Icov" ID="getCovariance" Target="{object_name}"/>
            <Condition ID="CompareNums" a="{Icov}" b="{target_Cov}" test="&gt;"/>
            <SubTree ID="RelativeMove" __shared_blackboard="false" frame_name="frame" op="0" or="0" oy="0" x="gx" y="gy" z="gz"/>
        </Sequence>
    </BehaviorTree>
    <BehaviorTree ID="DownwardSearch">
        <Sequence>
            <Action ID="Info" message="Searching for {object_name} with target covarience {target_cov}"/>
            <SetBlackboard output_key="0" value="0"/>
            <Action ID="SetMappingTarget" lock_map="0" target_object="{object_name}" time_limit_secs="3"/>
            <SetBlackboard output_key="radius_step" value="2"/>
            <Action ID="SetStatus" status="searching"/>
            <Action ID="Format" format="{object_name}_frame" out="frame"/>
            <SubTree ID="RelativeMove" __shared_blackboard="false" frame_name="frame" op="0" or="0" oy="0" x="0" y="0" z="min_dist"/>
            <SetBlackboard name="half the distance you want" output_key="dist" value="{radius_step}"/>
            <SetBlackboard output_key="link" value="talos/dropper_link"/>
            <Decorator ID="RetryUntilSuccessfulOrTimeout" num_seconds="{timeout_sec}">
                <Fallback>
                    <Sequence>
                        <Action ID="TransformPose" from_frame="{frame}" op="0" or="0" out_op="" out_or="" out_oy="" out_x="before_x" out_y="before_y" out_z="before_z" oy="0" to_frame="world" x="0" y="0" z="0"/>
                        <Action ID="Info" message="searching within a {dist} radius of the initial guess"/>
                        <Action ID="Math" a="{dist}" b="-1" operator="*" out="{ndist}"/>
                        <SubTree ID="DownwardMove" __shared_blackboard="false" frame="frame" gx="dist" gy="ndist" gz="min_dist" object_name="object_name" target_Cov="target_cov"/>
                        <SubTree ID="DownwardMove" __shared_blackboard="false" frame="frame" gx="ndist" gy="ndist" gz="min_dist" object_name="object_name" target_Cov="target_cov"/>
                        <SubTree ID="DownwardMove" __shared_blackboard="false" frame="frame" gx="ndist" gy="dist" gz="min_dist" object_name="object_name" target_Cov="target_cov"/>
                        <SubTree ID="DownwardMove" __shared_blackboard="false" frame="frame" gx="dist" gy="dist" gz="min_dist" object_name="object_name" target_Cov="target_cov"/>
                        <Action ID="Math" a="{dist}" b="{radius_step}" operator="+" out="{dist}"/>
                        <Action Covariance="cov" ID="getCovariance" Target="{object_name}"/>
                        <Action ID="Info" message="object {object_name} covariance at {cov}, target is {target_cov}, distance is {dist}"/>
                        <Action ID="TransformPose" from_frame="{frame}" op="0" or="0" out_op="" out_or="" out_oy="" out_x="after_x" out_y="after_y" out_z="after_z" oy="0" to_frame="world" x="0" y="0" z="0"/>
                        <Action ID="CalculateDistance" dist="amount_adjusted" x1="{before_x}" x2="{after_x}" y1="{before_y}" y2="{after_y}" z1="{before_z}" z2="{after_z}"/>
                        <Action ID="Info" message="Estimate moved {amount_adjusted} meters during last loop"/>
                        <IfThenElse name="should we reset dist">
                            <Condition ID="CompareNums" a="{amount_adjusted}" b="0.15" test="&gt;"/>
                            <Sequence name="reset dist">
                                <Action ID="Info" message="Detected object enough to sufficiently move. Resetting search"/>
                                <SetBlackboard output_key="dist" value="0"/>
                            </Sequence>
                            <AlwaysSuccess/>
                        </IfThenElse>
                        <IfThenElse>
                            <Condition ID="CompareNums" a="{dist}" b="3" test="&gt;"/>
                            <Sequence>
                                <Action ID="Info" message="Got too far away from object estimate. Resetting search"/>
                                <SetBlackboard output_key="dist" value="0"/>
                            </Sequence>
                            <AlwaysSuccess/>
                        </IfThenElse>
                        <Condition ID="CompareNums" a="{cov}" b="{target_cov}" test="&lt;"/>
                    </Sequence>
                    <Sequence>
                        <Action Covariance="final_cov" ID="getCovariance" Target="{object_name}"/>
                        <Action ID="Info" message="error is {final_cov}"/>
                        <Condition ID="CompareNums" a="{final_cov}" b="{target_cov}" test="&lt;"/>
                    </Sequence>
                </Fallback>
            </Decorator>
            <Action ID="Info" message="{object_name} found"/>
        </Sequence>
    </BehaviorTree>
    <BehaviorTree ID="FireDropper">
        <ForceSuccess name="REMOVE ME">
            <Sequence>
                <SetBlackboard output_key="10" value="10"/>
                <Action ID="Info" message="Attempting to fire Dropper..."/>
                <SetBlackboard output_key="dropper_srv" value="command/actuator/dropper"/>
                <SubTree ID="CheckActuatorStates" __shared_blackboard="false"/>
                <SubTree ID="WaitForActuators" __shared_blackboard="false" timeout_secs="10"/>
                <Action ID="GetActuatorStatus" actuators_busy="" claw_state="" dropper_available_count="droppers" dropper_state="" torpedo_available_count="" torpedo_state=""/>
                <Action ID="Info" message="{droppers} droppers available."/>
                <Action ID="Format" format="{droppers}.0" out="droppersstr"/>
                <IfThenElse>
                    <Condition ID="CompareNums" a="{droppersstr}" b="0" name="droppers available?" test="&gt;"/>
                    <Sequence name="fire dropper">
                        <Action ID="Info" message="Calling trigger service {dropper_srv}"/>
                        <Action ID="CallTriggerService" srv_name="{dropper_srv}" time_limit_secs="1"/>
                        <Action ID="Wait" seconds="1"/>
                        <SubTree ID="WaitForActuators" __shared_blackboard="false" timeout_secs="10"/>
                        <Action ID="Info" message="Dropper fired!"/>
                    </Sequence>
                    <ForceFailure>
                        <Action ID="Error" message="No dropper available!"/>
                    </ForceFailure>
                </IfThenElse>
            </Sequence>
        </ForceSuccess>
    </BehaviorTree>
    <BehaviorTree ID="FireTorpedo">
        <ForceSuccess name="REMOVE ME">
            <Sequence>
                <SetBlackboard output_key="10" value="10"/>
                <Action ID="Info" message="Attempting to fire torpedo..."/>
                <SetBlackboard output_key="torpedo_srv" value="command/actuator/torpedo"/>
                <SubTree ID="CheckActuatorStates" __shared_blackboard="false"/>
                <SubTree ID="WaitForActuators" __shared_blackboard="false" timeout_secs="10"/>
                <Action ID="GetActuatorStatus" actuators_busy="" claw_state="" dropper_available_count="" dropper_state="" torpedo_available_count="torpedoes" torpedo_state=""/>
                <Action ID="Info" message="{torpedoes} droppers available."/>
                <Action ID="Format" format="{torpedoes}.0" out="torpedoesstr"/>
                <IfThenElse>
                    <Condition ID="CompareNums" a="{torpedoesstr}" b="0" name="droppers available?" test="&gt;"/>
                    <Sequence name="fire torpedo">
                        <Action ID="Info" message="Calling trigger service {torpedo_srv}"/>
                        <Action ID="CallTriggerService" srv_name="{torpedo_srv}" time_limit_secs="1"/>
                        <Action ID="Wait" seconds="1"/>
                        <SubTree ID="WaitForActuators" __shared_blackboard="false" timeout_secs="10"/>
                        <Action ID="Info" message="Torpedo fired!"/>
                    </Sequence>
                    <ForceFailure>
                        <Action ID="Error" message="No torpedoes available!"/>
                    </ForceFailure>
                </IfThenElse>
            </Sequence>
        </ForceSuccess>
    </BehaviorTree>
    <BehaviorTree ID="FlipTree">
        <Sequence>
            <Action ID="SetControllerSafeMode" safe="false" timeout_secs="10.0"/>
            <Action ID="GetOdometry" op="" or="" oy="" x="{pre_flip_x}" y="{pre_flip_y}" z=""/>
            <Action ID="PublishInt8" data="1" topic="controller/stunt_state"/>
            <Action ID="Wait" seconds="1"/>
            <Action ID="PublishInt8" data="0" topic="controller/stunt_state"/>
            <Action ID="Wait" seconds="6"/>
            <Action ID="PublishEKFPose" pitch="0" roll="0" setOrientation="false" setX="true" setY="true" setZ="false" x="{pre_flip_x}" y="{pre_flip_y}" yaw="0" z="0"/>
        </Sequence>
    </BehaviorTree>
    <BehaviorTree ID="GateTree">
        <Sequence>
            <SetBlackboard output_key="-1" value="-1"/>
            <SetBlackboard output_key="60" value="60"/>
            <SetBlackboard output_key="1" value="1"/>
            <SetBlackboard output_key="120" value="120"/>
            <SetBlackboard output_key="1.75" value="1.75"/>
            <SetBlackboard output_key="4.0" value="4.0"/>
            <SetBlackboard output_key="2" value="2"/>
            <SetBlackboard output_key="3.1415" value="3.1415"/>
            <SetBlackboard output_key="0" value="0"/>
            <SetBlackboard output_key="target_cov" value="3"/>
            <SetBlackboard output_key="undergate_depth" value="-0.5"/>
            <SetBlackboard output_key="prop" value="gate"/>
            <Action ID="Format" format="{prop}_frame" out="prop_frame"/>
            <SetBlackboard output_key="subprop" value="gate_hot"/>
            <Action ID="Format" format="{subprop}_frame" out="subprop_frame"/>
            <Action ID="Info" message="GATE TIME"/>
            <SubTree ID="RelativeMove" __shared_blackboard="false" frame_name="prop_frame" op="0" or="0" oy="3.1415" x="2" y="0" z="0"/>
            <SubTree ID="Search" __shared_blackboard="false" max_dist="4.0" min_dist="1.75" object_name="prop" target_cov="target_cov" timeout_secs="120"/>
            <SubTree ID="MiniSearch" __shared_blackboard="false" object_name="subprop" parent_object="prop" prox_x="1" prox_z="0" proximity="1" target_cov="target_cov" timeout_secs="60"/>
            <Action ID="SetStatus" status="aligning"/>
            <SubTree ID="RelativeMove" __shared_blackboard="false" frame_name="subprop_frame" op="0" or="0" oy="3.1415" x="1" y="0" z="undergate_depth"/>
            <Action ID="SetStatus" status="performing"/>
            <SubTree ID="RelativeMove" __shared_blackboard="false" frame_name="subprop_frame" op="0" or="0" oy="3.1415" x="0" y="0" z="undergate_depth"/>
            <SubTree ID="FlipTree"/>
            <Action ID="Wait" seconds="2"/>
            <SubTree ID="RelativeMove" __shared_blackboard="false" frame_name="subprop_frame" op="0" or="0" oy="3.1415" x="-1" y="0" z="undergate_depth"/>
        </Sequence>
    </BehaviorTree>
    <BehaviorTree ID="KillController">
        <Sequence>
            <Action ID="PublishToController" isOrientation="1" mode="0" x="0" y="0" z="0"/>
            <Action ID="PublishToController" isOrientation="0" mode="0" x="0" y="0" z="0"/>
        </Sequence>
    </BehaviorTree>
    <BehaviorTree ID="MiniSearch">
        <Sequence name="minisearch">
            <SetBlackboard output_key="60" value="60"/>
            <SetBlackboard output_key="1" value="1"/>
            <SetBlackboard output_key="3.1415" value="3.1415"/>
            <SetBlackboard output_key="0" value="0"/>
            <Action ID="Info" message="Refining esimate for object {object_name}"/>
            <Action ID="Format" format="{parent_object}_frame" out="parent_frame"/>
            <Action ID="Format" format="{object_name}_frame" out="object_frame"/>
            <Action ID="SetMappingTarget" lock_map="0" target_object="{object_name}" time_limit_secs="3"/>
            <Action ID="SetStatus" status="searching"/>
            <Action ID="TransformPose" from_frame="{parent_frame}" op="0" or="0" out_op="" out_or="" out_oy="" out_x="x" out_y="y" out_z="z" oy="3.1415" to_frame="world" x="{prox_x}" y="0" z="{prox_z}"/>
            <SubTree ID="PrimitiveMovePosition" __shared_blackboard="false" timeout="60" x="x" y="y" z="z"/>
            <Decorator ID="RetryUntilSuccessfulOrTimeout" num_seconds="{timeout_secs}">
                <Sequence name="shrink cov">
                    <Action ID="Wait" seconds="1"/>
                    <Action Covariance="{cov}" ID="getCovariance" Target="{object_name}"/>
                    <IfThenElse name="move in front of sub object if confident">
                        <Condition ID="CompareNums" a="{cov}" b="0.1" name="if error good enough" test="&lt;"/>
                        <Sequence name="move in front of object">
                            <Action ID="TransformPose" from_frame="{object_frame}" op="0" or="0" out_op="" out_or="" out_oy="new_yaw" out_x="new_x" out_y="new_y" out_z="new_z" oy="3.1415" to_frame="world" x="{proximity}" y="0" z="0"/>
                            <Action ID="PublishToController" isOrientation="0" mode="3" x="{new_x}" y="{new_y}" z="{new_z}"/>
                            <Action ID="PublishToController" isOrientation="1" mode="3" x="0" y="0" z="{new_yaw}"/>
                        </Sequence>
                        <AlwaysSuccess name="move in front of parent"/>
                    </IfThenElse>
                    <Action ID="Info" message="Object {object_name} has covariance {cov}"/>
                    <Condition ID="CompareNums" a="{cov}" b="{target_cov}" test="&lt;"/>
                </Sequence>
            </Decorator>
        </Sequence>
    </BehaviorTree>
    <BehaviorTree ID="Move">
        <Sequence>
            <SetBlackboard output_key="15" value="15"/>
            <Action ID="Info" message="Moving to XYZ {x}, {y}, {z} with RPY {or}, {op}, {oy}"/>
            <SubTree ID="SmartMovePosition" __shared_blackboard="false" x="x" y="y" z="z"/>
            <SubTree ID="PrimitiveMoveOrientation" __shared_blackboard="false" p="or" r="op" timeout="15" y="oy"/>
            <Action ID="Wait" seconds="2"/>
            <Action ID="Info" message="Move Complete."/>
        </Sequence>
    </BehaviorTree>
    <BehaviorTree ID="PrimitiveMoveOrientation">
        <Sequence>
            <Action ID="Info" message="Rotating to RPY {r}, {p}, {y}"/>
            <Fallback>
                <Decorator ID="RetryUntilSuccessfulOrTimeout" num_seconds="{timeout}">
                    <Sequence>
                        <Action ID="Wait" seconds="0.25"/>
                        <Action ID="PublishToController" isOrientation="1" mode="3" x="{r}" y="{p}" z="{y}"/>
                        <Action ID="GetOdometry" name="Get Current RPY" op="{cp}" or="{cr}" oy="{cy}" x="" y="" z=""/>
                        <Condition ID="ApproxEqualToAngle" a="{cr}" b="{r}" name="at goal roll?" range="0.25"/>
                        <Condition ID="ApproxEqualToAngle" a="{cp}" b="{p}" name="at goal pitch?" range="0.25"/>
                        <Condition ID="ApproxEqualToAngle" a="{cy}" b="{y}" name="at goal yaw?" range="0.25"/>
                    </Sequence>
                </Decorator>
                <ForceSuccess>
                    <Sequence>
                        <Action ID="GetOdometry" op="{cr}" or="{cp}" oy="{cy}" x="" y="" z=""/>
                        <Action ID="Error" message="Couldn't bring talos to the desired orientation! Wanted {r}, {p}, {y} but got {cr}, {cp}, {cy}. Moving on anyway."/>
                    </Sequence>
                </ForceSuccess>
            </Fallback>
            <Action ID="Info" message="Rotation Complete."/>
        </Sequence>
    </BehaviorTree>
    <BehaviorTree ID="PrimitiveMovePosition">
        <Sequence>
            <SetBlackboard output_key="min_depth" value="-0.25"/>
            <IfThenElse name="Ensure Z good">
                <Condition ID="CompareNums" a="{z}" b="{min_depth}" name="z above 0.75..." test="&gt;"/>
                <Sequence>
                    <Action ID="Info" message="Enforcing minimum depth of {min_depth} meters... requested depth was previously {z}."/>
                    <SetBlackboard name="...too high" output_key="valid_z" value="{min_depth}"/>
                </Sequence>
                <SetBlackboard name="...all good" output_key="valid_z" value="{z}"/>
            </IfThenElse>
            <Action ID="Info" message="Translating to XYZ: {x}, {y}, {z} in no more than {timeout} seconds"/>
            <Decorator ID="RetryUntilSuccessfulOrTimeout" num_seconds="{timeout}">
                <Sequence>
                    <Action ID="PublishToController" isOrientation="0" mode="3" x="{x}" y="{y}" z="{valid_z}"/>
                    <Action ID="Wait" seconds="0.25"/>
                    <Action ID="GetOdometry" name="Get Current XYZ" op="" or="" oy="" x="{cx}" y="{cy}" z="{cz}"/>
                    <Action ID="CalculateDistance" dist="{dist}" x1="{x}" x2="{cx}" y1="{y}" y2="{cy}" z1="{valid_z}" z2="{cz}"/>
                    <Condition ID="CompareNums" a="{dist}" b="0.25" name="At goal point?" test="&lt;"/>
                </Sequence>
            </Decorator>
            <Action ID="Info" message="Translation Complete."/>
        </Sequence>
    </BehaviorTree>
    <BehaviorTree ID="RelativeMove">
        <Sequence>
            <Action ID="TransformPose" from_frame="{frame_name}" op="{op}" or="{or}" out_op="gop" out_or="gor" out_oy="goy" out_x="gx" out_y="gy" out_z="gz" oy="{oy}" to_frame="world" x="{x}" y="{y}" z="{z}"/>
            <SubTree ID="Move" __shared_blackboard="false" op="gop" or="gor" oy="goy" x="gx" y="gy" z="gz"/>
        </Sequence>
    </BehaviorTree>
    <BehaviorTree ID="Search">
        <Sequence name="Search">
            <Action ID="Info" message="Searching for {object_name} with target covariance {target_cov}"/>
            <Action ID="SetStatus" status="searching"/>
            <Action ID="Format" format="{object_name}_frame" out="frame"/>
            <Action ID="SetMappingTarget" lock_map="0" target_object="{object_name}" time_limit_secs="3"/>
            <Action ID="GetOdometry" op="op" or="or" oy="oy" x="x" y="y" z="z"/>
            <Action ID="TransformPose" from_frame="{frame}" op="0" or="0" out_op="f_op" out_or="f_or" out_oy="f_oy" out_x="f_x" out_y="f_y" out_z="f_z" oy="0" to_frame="world" x="0" y="0" z="0"/>
            <SetBlackboard output_key="dist" value="{max_dist}"/>
            <Fallback>
                <Condition ID="CompareNums" a="{dist}" b="{max_dist}" test="&gt;"/>
                <SetBlackboard output_key="dist" value="{max_dist}"/>
            </Fallback>
            <Decorator ID="RetryUntilSuccessfulOrTimeout" name="Search Loop" num_seconds="{timeout_secs}">
                <Sequence name="Search Loop">
                    <SetBlackboard output_key="0" value="0"/>
                    <SetBlackboard output_key="15" value="15"/>
                    <Action ID="Info" message="Search moving to {dist} meters away from {object_name}"/>
                    <Action ID="TransformPose" from_frame="{frame}" op="0" or="0" out_op="gop" out_or="gor" out_oy="goy" out_x="gx" out_y="gy" out_z="gz" oy="3.1415" to_frame="world" x="{dist}" y="0" z="0"/>
                    <SubTree ID="PrimitiveMoveOrientation" __shared_blackboard="false" p="gop" r="gor" timeout="15" y="goy"/>
                    <SubTree ID="SmartMovePosition" __shared_blackboard="false" x="gx" y="gy" z="gz"/>
                    <SubTree ID="Move" __shared_blackboard="false" op="0" or="0" oy="goy" x="gx" y="gy" z="gz"/>
                    <Action ID="Info" message="Let mapping gather detections on {object_name}"/>
                    <SetBlackboard name="pi/6" output_key="angle" value="0.7854"/>
                    <ForceSuccess name="Search at position">
                        <Fallback>
                            <SubTree ID="CollectDetsAtAngle" __shared_blackboard="false" frame="frame" rel_yaw="0" target="object_name" target_error="target_cov"/>
                            <SubTree ID="CollectDetsAtAngle" __shared_blackboard="false" frame="frame" rel_yaw="angle" target="object_name" target_error="target_cov"/>
                            <Sequence>
                                <Action ID="Math" a="{angle}" b="-1" operator="*" out="neg_angle"/>
                                <SubTree ID="CollectDetsAtAngle" __shared_blackboard="false" frame="frame" rel_yaw="neg_angle" target="object_name" target_error="target_cov"/>
                            </Sequence>
                        </Fallback>
                    </ForceSuccess>
                    <Action Covariance="cov" ID="getCovariance" Target="{object_name}"/>
                    <Action ID="Info" message="object {object_name} covariance at {cov}, target is {target_cov}, distance is {dist}"/>
                    <Fallback name="Check covariance and distance">
                        <Condition ID="CompareNums" a="{cov}" b="{target_cov}" name="did we find it yet" test="&lt;"/>
                        <ForceFailure>
                            <IfThenElse name="figure out new dist">
                                <Condition ID="CompareNums" a="{dist}" b="{min_dist}" name="are we far enough away?" test="&gt;"/>
                                <Sequence>
                                    <Action ID="Math" a="{dist}" b="0.67" name="Make dist smaller" operator="*" out="dist"/>
                                    <IfThenElse name="Enforce minimum dist">
                                        <Condition ID="CompareNums" a="{dist}" b="{min_dist}" test="&lt;"/>
                                        <SetBlackboard output_key="dist" value="{min_dist}"/>
                                        <AlwaysSuccess/>
                                    </IfThenElse>
                                </Sequence>
                                <Sequence name="back up">
                                    <Action ID="Info" message="Got too close ({dist} meters) without finding object. Backing up"/>
                                    <SetBlackboard output_key="dist" value="{max_dist}"/>
                                </Sequence>
                            </IfThenElse>
                        </ForceFailure>
                    </Fallback>
                </Sequence>
            </Decorator>
            <Fallback name="check distance">
                <Condition ID="CompareNums" a="{cov}" b="{target_cov}" test="&lt;"/>
                <Condition ID="CompareNums" a="{dist}" b="{min_dist}" test="&gt;"/>
                <ForceFailure>
                    <Action ID="Error" message="Could not find {object_name} after {timeout_secs} seconds."/>
                </ForceFailure>
            </Fallback>
        </Sequence>
    </BehaviorTree>
    <BehaviorTree ID="SetActuatorsArmed">
        <ForceSuccess name="REMOVE ME">
            <Sequence>
                <Action ID="Info" message="Setting &quot;Actuators&quot; armed state to {armed}"/>
                <Action ID="Wait" seconds="1"/>
                <Action ID="CallSetBoolService" data="{armed}" srv_name="command/actuator/arm" time_limit_secs="1"/>
                <IfThenElse>
                    <Condition ID="CompareNums" a="{armed}" b="1" test="=="/>
                    <Action ID="Info" message="&quot;ACTUATORS&quot; ARMED"/>
                    <Action ID="Info" message="&quot;ACTUATORS&quot; DISARMED"/>
                </IfThenElse>
            </Sequence>
        </ForceSuccess>
    </BehaviorTree>
    <BehaviorTree ID="ShootAtStargate">
        <Sequence name="ShootAtStargate">
            <SetBlackboard output_key="talos/torpedo_link" value="talos/torpedo_link"/>
            <SetBlackboard output_key="0.25" value="0.25"/>
            <SetBlackboard output_key="1" value="1"/>
            <SetBlackboard output_key="60" value="60"/>
            <SetBlackboard output_key="target_cov" value="0.2"/>
            <Action ID="Info" message="Attempting to shoot object {object_name}"/>
            <Action ID="Format" format="{object_name}_hole" out="hole_name"/>
            <Action ID="Format" format="{hole_name}_frame" out="hole_frame"/>
            <ForceSuccess>
                <SubTree ID="MiniSearch" __shared_blackboard="false" object_name="hole_name" parent_object="object_name" prox_x="1" prox_z="0" proximity="1" target_cov="target_cov" timeout_secs="60"/>
            </ForceSuccess>
            <Action ID="SetMappingTarget" lock_map="1" target_object="" time_limit_secs="1"/>
            <Action ID="SetStatus" status="aligning"/>
            <SubTree ID="AlignLink" __shared_blackboard="false" allignment="1" frame_name="hole_frame" link_name="talos/torpedo_link" prox_x="1" prox_z="0"/>
            <SubTree ID="AlignLink" __shared_blackboard="false" allignment="1" frame_name="hole_frame" link_name="talos/torpedo_link" prox_x="1" prox_z="0"/>
            <Action ID="SetStatus" status="performing"/>
            <RetryUntilSuccessful num_attempts="2">
                <SubTree ID="FireTorpedo"/>
            </RetryUntilSuccessful>
        </Sequence>
    </BehaviorTree>
    <BehaviorTree ID="ShootObject">
        <Sequence name="shootobject">
            <SetBlackboard output_key="torpedo" value="torpedo"/>
            <SetBlackboard output_key="1" value="1"/>
            <SetBlackboard output_key="shoot_prox" value="0.2"/>
            <SetBlackboard output_key="ms_prox" value="2.5"/>
            <SetBlackboard output_key="0" value="0"/>
            <SetBlackboard output_key="60" value="60"/>
            <SetBlackboard output_key="target_cov" value="0.0004"/>
            <Action ID="Format" format="{object_name}_frame" out="object_frame"/>
            <Action ID="Info" message="Attempting to shoot object {object_name}"/>
            <ForceSuccess>
                <SubTree ID="MiniSearch" __shared_blackboard="false" object_name="object_name" parent_object="torpedo" prox_x="1" prox_z="0" proximity="ms_prox" target_cov="target_cov" timeout_secs="60"/>
            </ForceSuccess>
            <Action ID="SetMappingTarget" lock_map="1" target_object="" time_limit_secs="3"/>
            <Action ID="SetStatus" status="aligning"/>
            <SubTree ID="AlignLink" __shared_blackboard="false" allignment="1" frame_name="object_frame" link_name="torpedo_link_name" prox_x="1" prox_z="0"/>
            <Action ID="Wait" seconds="10"/>
            <Action ID="SetStatus" status="performing"/>
            <RetryUntilSuccessful num_attempts="2">
                <SubTree ID="FireTorpedo"/>
            </RetryUntilSuccessful>
        </Sequence>
    </BehaviorTree>
    <BehaviorTree ID="SmartMovePosition">
        <Fallback>
            <Decorator ID="RetryUntilSuccessfulOrTimeout" num_seconds="120">
                <Sequence name="Try move to position">
                    <SetBlackboard output_key="timeout" value="15"/>
                    <Action ID="Info" message="Attempting to move forward for {timeout} seconds"/>
                    <Action ID="GetOdometry" op="" or="" oy="" x="old_x" y="old_y" z="old_z"/>
                    <Fallback>
                        <SubTree ID="PrimitiveMovePosition" __shared_blackboard="false" timeout="timeout" x="x" y="y" z="z"/>
                        <Sequence name="Evaluate possible obstacle">
                            <Action ID="GetOdometry" op="" or="" oy="" x="curr_x" y="curr_y" z="curr_z"/>
                            <Action ID="CalculateDistance" dist="dist_travelled" x1="{old_x}" x2="{curr_x}" y1="{old_y}" y2="{curr_y}" z1="{old_z}" z2="{curr_z}"/>
                            <IfThenElse name="avoid obstacle if necessary">
                                <Condition ID="CompareNums" a="{dist_travelled}" b="0.5" name="expect 1 meter travelled in 11 seconds" test="&lt;"/>
                                <Decorator ID="RetryUntilSuccessfulOrTimeout" num_seconds="60">
                                    <Sequence name="if dist &lt; 1m, move out the way">
                                        <SetBlackboard output_key="5" value="5"/>
                                        <SetBlackboard output_key="60" value="60"/>
                                        <SetBlackboard output_key="-0.75" value="-0.75"/>
                                        <SetBlackboard output_key="20" value="20"/>
                                        <SetBlackboard output_key="15" value="15"/>
                                        <Action ID="Info" message="Detected an obstacle. Attempting to move out of the way"/>
                                        <SubTree ID="PrimitiveMovePosition" __shared_blackboard="false" timeout="60" x="old_x" y="old_y" z="old_z"/>
                                        <Action ID="Wait" name="Wait to stablize" seconds="3"/>
                                        <Action ID="TransformPose" from_frame="talos/base_link" op="0" or="0" out_op="" out_or="" out_oy="" out_x="em_x" out_y="em_y" out_z="em_z" oy="0" to_frame="world" x="-1" y="1" z="0"/>
                                        <ForceSuccess>
                                            <SubTree ID="PrimitiveMovePosition" __shared_blackboard="false" timeout="5" x="em_x" y="em_y" z="curr_z"/>
                                        </ForceSuccess>
                                        <ForceSuccess>
                                            <SubTree ID="PrimitiveMovePosition" __shared_blackboard="false" timeout="5" x="em_x" y="em_y" z="-0.75"/>
                                        </ForceSuccess>
                                        <Action ID="Wait" name="wait for stable orientation" seconds="3"/>
                                        <Action ID="TransformPose" from_frame="talos/base_link" op="0" or="0" out_op="" out_or="" out_oy="" out_x="em_x" out_y="em_y" out_z="em_z" oy="0" to_frame="world" x="2" y="0" z="0"/>
                                        <Fallback name="move past obstacle">
                                            <SubTree ID="PrimitiveMovePosition" __shared_blackboard="false" timeout="15" x="em_x" y="em_y" z="em_z"/>
                                            <ForceFailure>
                                                <Action ID="Error" message="Failed to move out of the way!"/>
                                            </ForceFailure>
                                        </Fallback>
                                    </Sequence>
                                </Decorator>
                                <Action ID="Info" message="Not there after {timeout} seconds, but made progress"/>
                            </IfThenElse>
                            <AlwaysFailure name="try move again"/>
                        </Sequence>
                    </Fallback>
                </Sequence>
            </Decorator>
            <ForceFailure>
                <Action ID="Error" message="Failed to move to XYZ position {x}, {y}, {z}. Theres something in the way"/>
            </ForceFailure>
        </Fallback>
    </BehaviorTree>
    <BehaviorTree ID="SpinTree">
        <Sequence>
            <SetBlackboard output_key="15" value="15"/>
            <SetBlackboard output_key="0" value="0"/>
            <Action ID="GetOdometry" op="" or="" oy="orig_y" x="" y="" z=""/>
            <Repeat num_cycles="12">
                <Sequence name="spin_pi/3">
                    <Action ID="Info" message="Spinning once"/>
                    <Action ID="TransformPose" from_frame="talos/base_link" op="0" or="0" out_op="" out_or="" out_oy="new_yaw" out_x="" out_y="" out_z="" oy="2.09" to_frame="world" x="0" y="0" z="0"/>
                    <Fallback>
                        <Decorator ID="RetryUntilSuccessfulOrTimeout" num_seconds="5">
                            <Sequence>
                                <Action ID="PublishToController" isOrientation="1" mode="3" x="0" y="0" z="{new_yaw}"/>
                                <Action ID="GetOdometry" op="" or="" oy="curr_yaw" x="" y="" z=""/>
                                <Condition ID="ApproxEqualToAngle" a="{curr_yaw}" b="{new_yaw}" range="1.04"/>
                            </Sequence>
                        </Decorator>
                        <ForceFailure>
                            <Action ID="Error" message="Failed to spin: current yaw is {curr_yaw}, but desired is {new_yaw}"/>
                        </ForceFailure>
                    </Fallback>
                </Sequence>
            </Repeat>
            <SubTree ID="PrimitiveMoveOrientation" __shared_blackboard="false" p="0" r="0" timeout="15" y="orig_y"/>
        </Sequence>
    </BehaviorTree>
    <BehaviorTree ID="SurfaceTree">
        <Sequence>
            <SetBlackboard output_key="5" value="5"/>
            <SetBlackboard name="boolean for if surface should be epic" output_key="cool_surface" value="0"/>
            <SetBlackboard output_key="depth" value="-0.5"/>
            <SetBlackboard name="set target pitch" output_key="target_pitch" value="-1.1"/>
            <SetBlackboard output_key="-1.5707" value="-1.5707"/>
            <SetBlackboard output_key="0" value="0"/>
            <SetBlackboard output_key="180" value="180"/>
            <SetBlackboard output_key="table_frame" value="table_frame"/>
            <SetBlackboard output_key="target_cov" value="1"/>
            <Action ID="TransformPose" from_frame="table_frame" op="0" or="0" out_op="" out_or="" out_oy="" out_x="table_x" out_y="table_y" out_z="" oy="0" to_frame="world" x="0" y="0" z="0"/>
            <SubTree ID="Move" __shared_blackboard="false" op="0" or="0" oy="0" x="table_x" y="table_y" z="depth"/>
            <ForceSuccess>
                <IfThenElse name="conditional surface">
                    <Condition ID="CompareNums" a="{cool_surface}" b="1" name="is surface cool?" test="=="/>
                    <Sequence name="cool surface">
                        <SetBlackboard output_key="15" value="15"/>
                        <SubTree ID="PrimitiveMoveOrientation" __shared_blackboard="false" p="target_pitch" r="0" timeout="15" y="0"/>
                        <Decorator ID="RetryUntilSuccessfulOrTimeout" num_seconds="1.5">
                            <Sequence>
                                <Action ID="PublishToController" isOrientation="0" mode="2" name="go as fast as possible" x="100" y="0" z="0"/>
                                <Action ID="GetOdometry" op="" or="" oy="" x="" y="" z="curr_z"/>
                                <Condition ID="CompareNums" a="{curr_z}" b="0" test="&gt;"/>
                            </Sequence>
                        </Decorator>
                    </Sequence>
                    <SubTree ID="PrimitiveMovePosition" __shared_blackboard="false" timeout="5" x="table_x" y="table_y" z="0"/>
                </IfThenElse>
            </ForceSuccess>
            <SubTree ID="KillController"/>
        </Sequence>
    </BehaviorTree>
    <BehaviorTree ID="TorpedoTree">
        <Sequence name="TORPEDO">
            <SetBlackboard output_key="1" value="1"/>
            <SetBlackboard output_key="0" value="0"/>
            <SetBlackboard output_key="search_timeout" value="180"/>
            <SetBlackboard output_key="target_cov" value="0.01"/>
            <SetBlackboard output_key="min_dist" value="1"/>
            <SetBlackboard output_key="max_dist" value="1.75"/>
            <SetBlackboard output_key="object_name" value="torpedo"/>
            <SubTree ID="Search" __shared_blackboard="false" max_dist="max_dist" min_dist="min_dist" object_name="object_name" target_cov="target_cov" timeout_secs="search_timeout"/>
            <Fallback name="Try run while armed">
                <Sequence name="torpedo">
                    <SetBlackboard output_key="talos/torpedo_1_link" value="talos/torpedo_1_link"/>
                    <SetBlackboard output_key="talos/torpedo_0_link" value="talos/torpedo_0_link"/>
                    <SetBlackboard output_key="torpedo_first" value="torpedo_large_hole"/>
                    <SetBlackboard output_key="torpedo_second" value="torpedo_small_hole"/>
                    <SubTree ID="SetActuatorsArmed" __shared_blackboard="false" armed="1"/>
                    <SubTree ID="ShootObject" __shared_blackboard="false" object_name="torpedo_first" torpedo_link_name="talos/torpedo_0_link"/>
                    <SubTree ID="ShootObject" __shared_blackboard="false" object_name="torpedo_second" torpedo_link_name="talos/torpedo_1_link"/>
                </Sequence>
                <ForceFailure>
                    <Sequence name="handle fail">
                        <Action ID="Error" message="Torpedo tree failed, disarming actuators"/>
                        <SubTree ID="SetActuatorsArmed" __shared_blackboard="false" armed="0"/>
                    </Sequence>
                </ForceFailure>
            </Fallback>
            <Sequence name="handle success">
                <Action ID="Info" message="Torpedo tree succeeded, disarming torpedos"/>
                <SubTree ID="SetActuatorsArmed" __shared_blackboard="false" armed="0"/>
            </Sequence>
        </Sequence>
    </BehaviorTree>
    <BehaviorTree ID="WaitForActuators">
        <Fallback name="wait for not busy">
            <Decorator ID="RetryUntilSuccessfulOrTimeout" num_seconds="{timeout_secs}">
                <Sequence>
                    <Action ID="Info" message="Waiting for actuators..."/>
                    <Action ID="Wait" seconds="0.25"/>
                    <Action ID="GetActuatorStatus" actuators_busy="busy" claw_state="" dropper_available_count="" dropper_state="" torpedo_available_count="" torpedo_state=""/>
                    <Inverter>
                        <Condition ID="IsTrue" value="{busy}"/>
                    </Inverter>
                    <Action ID="Info" message="Actuators free"/>
                </Sequence>
            </Decorator>
            <ForceFailure>
                <Action ID="Error" message="Actuators busy!"/>
            </ForceFailure>
        </Fallback>
    </BehaviorTree>
    <BehaviorTree ID="WaitForKillSwitch">
        <Sequence>
            <Action ID="SetStatus" status="waiting"/>
            <Action ID="Info" message="Waiting for kill switch insert..."/>
            <Action ID="Wait" seconds="5"/>
            <RetryUntilSuccessful num_attempts="-1">
                <Sequence>
                    <Action ID="GetBoolTopic" topic="state/kill" value="{kill_switch_inserted}"/>
                    <Inverter name="IsFalse">
                        <Condition ID="IsTrue" value="{kill_switch_inserted}"/>
                    </Inverter>
                    <Action ID="Wait" seconds="1"/>
                    <Action ID="Info" message="KILL SWITCH INSERTED, TREE STARTING IN 5 SECONDS"/>
                </Sequence>
            </RetryUntilSuccessful>
            <Action ID="SetStatus" status="starting"/>
            <Action ID="Wait" seconds="5"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <TreeNodesModel>
        <SubTree ID="AlignLink">
            <input_port default="false" name="__shared_blackboard" required="false">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port default="1" name="allignment" required="true">in front or above</input_port>
            <input_port name="frame_name" required="true">frame to align to</input_port>
            <input_port name="link_name" required="true">link to align</input_port>
            <input_port default="1" name="prox_x" required="true">default x promity</input_port>
            <input_port default="0" name="prox_z" required="true">default z proximity</input_port>
        </SubTree>
        <Condition ID="ApproxEqualTo">
            <input_port name="a" required="true"/>
            <input_port name="b" required="true"/>
            <input_port name="range" required="true"/>
        </Condition>
        <Condition ID="ApproxEqualToAngle">
            <input_port name="a" required="true"/>
            <input_port name="b" required="true"/>
            <input_port name="range" required="true"/>
        </Condition>
        <SubTree ID="BinTree"/>
        <SubTree ID="BumpObject">
            <input_port default="false" name="__shared_blackboard" required="false">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="object_frame" required="true"/>
        </SubTree>
        <SubTree ID="BuoyTree"/>
        <Action ID="CalculateDistance">
            <output_port name="dist" required="false"/>
            <input_port name="x1" required="true"/>
            <input_port name="x2" required="true"/>
            <input_port name="y1" required="true"/>
            <input_port name="y2" required="true"/>
            <input_port name="z1" required="true"/>
            <input_port name="z2" required="true"/>
        </Action>
        <Action ID="CallSetBoolService">
            <input_port name="data" required="true">boolean value to set the thing to</input_port>
            <input_port name="srv_name" required="true">Name of the service to call</input_port>
            <input_port name="time_limit_secs" required="true">time limit for service after the call is made. Another second may be consumed waiting for it to come up</input_port>
        </Action>
        <Action ID="CallTriggerService">
            <input_port name="srv_name" required="true"/>
            <input_port name="time_limit_secs" required="true"/>
        </Action>
        <SubTree ID="CheckActuatorStates">
            <inout_port name="__shared_blackboard" required="true"/>
        </SubTree>
        <SubTree ID="CollectDetsAtAngle">
            <input_port default="false" name="__shared_blackboard" required="false">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="frame" required="true"/>
            <input_port name="rel_yaw" required="true"/>
            <input_port name="target" required="true"/>
            <input_port name="target_error" required="true"/>
        </SubTree>
        <Condition ID="CompareNums">
            <input_port name="a" required="true"/>
            <input_port name="b" required="true"/>
            <input_port name="test" required="true">can be &quot;&lt;&quot;, &quot;&gt;&quot;, or &quot;=&quot;.</input_port>
        </Condition>
        <Action ID="ComputeFrameAlignment">
            <input_port name="op" required="true"/>
            <input_port name="or" required="true"/>
            <output_port name="out_op" required="false"/>
            <output_port name="out_or" required="false"/>
            <output_port name="out_oy" required="false"/>
            <output_port name="out_x" required="false"/>
            <output_port name="out_y" required="false"/>
            <output_port name="out_z" required="false"/>
            <input_port name="oy" required="true"/>
            <input_port name="reference_frame" required="true"/>
            <input_port name="target_frame" required="true"/>
            <input_port name="x" required="true">target x-pos of frameName in world frame</input_port>
            <input_port name="y" required="true">target y-pos of frameName in world frame</input_port>
            <input_port name="z" required="true">target z-pos of frameName in world frame</input_port>
        </Action>
        <SubTree ID="Dive">
            <input_port default="false" name="__shared_blackboard" required="false">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="depth" required="true">depth to submerge to</input_port>
        </SubTree>
        <SubTree ID="DownwardMove">
            <input_port default="false" name="__shared_blackboard" required="false">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="frame" required="true"/>
            <input_port name="gx" required="false"/>
            <input_port name="gy" required="false"/>
            <input_port name="gz" required="true"/>
            <input_port name="object_name" required="true"/>
            <input_port name="target_Cov" required="true"/>
        </SubTree>
        <SubTree ID="DownwardSearch">
            <input_port default="false" name="__shared_blackboard" required="false">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="min_dist" required="false"/>
            <input_port name="object_name" required="false"/>
            <input_port name="target_cov" required="true"/>
            <input_port name="timeout_sec" required="false"/>
        </SubTree>
        <Action ID="Error">
            <input_port name="message" required="true">The message to print.</input_port>
        </Action>
        <SubTree ID="FireDropper"/>
        <SubTree ID="FireTorpedo"/>
        <SubTree ID="FlipTree"/>
        <Action ID="Format">
            <input_port name="format" required="true"/>
            <output_port name="out" required="false"/>
        </Action>
        <SubTree ID="GateTree"/>
        <Action ID="GetActuatorStatus">
            <output_port name="actuators_busy" required="false"/>
            <output_port name="claw_state" required="false"/>
            <output_port name="dropper_available_count" required="false"/>
            <output_port name="dropper_state" required="false"/>
            <output_port name="torpedo_available_count" required="false"/>
            <output_port name="torpedo_state" required="false"/>
        </Action>
        <Action ID="GetBoolTopic">
            <input_port name="topic" required="true">The topic to subscribe to.</input_port>
            <output_port name="value" required="false"/>
        </Action>
        <Action ID="GetOdometry">
            <output_port name="op" required="false"/>
            <output_port name="or" required="false"/>
            <output_port name="oy" required="false"/>
            <output_port name="x" required="false"/>
            <output_port name="y" required="false"/>
            <output_port name="z" required="false"/>
        </Action>
        <Action ID="HeadingToPoint">
            <input_port name="currX" required="true"/>
            <input_port name="currY" required="true"/>
            <output_port name="heading" required="false"/>
            <input_port name="targX" required="true"/>
            <input_port name="targY" required="true"/>
        </Action>
        <Action ID="Info">
            <input_port name="message" required="true">The message to print.</input_port>
        </Action>
        <Condition ID="IsTrue">
            <input_port name="value" required="true"/>
        </Condition>
        <SubTree ID="KillController"/>
        <Action ID="Math">
            <input_port name="a" required="true"/>
            <input_port name="b" required="true"/>
            <input_port default="+" name="operator" required="true">can be &quot;+&quot;, &quot;-&quot;, &quot;*&quot;, or &quot;/&quot;. Node will compute a &quot;op b. For example, if the operator is &quot;-&quot;, output will be a - b.</input_port>
            <output_port name="out" required="false"/>
        </Action>
        <SubTree ID="MiniSearch">
            <input_port default="false" name="__shared_blackboard" required="false">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="object_name" required="true"/>
            <input_port name="parent_object" required="true"/>
            <input_port default="1" name="prox_x" required="true"/>
            <input_port default="0" name="prox_z" required="true"/>
            <input_port default="1" name="proximity" required="true"/>
            <input_port default="1.25" name="target_cov" required="true"/>
            <input_port default="60" name="timeout_secs" required="true"/>
        </SubTree>
        <SubTree ID="Move">
            <input_port default="false" name="__shared_blackboard" required="false">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="op" required="true"/>
            <input_port name="or" required="true"/>
            <input_port name="oy" required="true"/>
            <input_port name="x" required="true"/>
            <input_port name="y" required="true"/>
            <input_port name="z" required="true"/>
        </SubTree>
        <SubTree ID="PrimitiveMoveOrientation">
            <input_port default="false" name="__shared_blackboard" required="false">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="p" required="true"/>
            <input_port name="r" required="true"/>
            <input_port default="15" name="timeout" required="true"/>
            <input_port name="y" required="true"/>
        </SubTree>
        <SubTree ID="PrimitiveMovePosition">
            <input_port default="false" name="__shared_blackboard" required="false">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port default="60" name="timeout" required="true"/>
            <input_port name="x" required="true"/>
            <input_port name="y" required="true"/>
            <input_port name="z" required="true"/>
        </SubTree>
        <Action ID="PublishEKFPose">
            <input_port default="0" name="pitch" required="false"/>
            <input_port default="0" name="roll" required="false"/>
            <input_port name="setOrientation" required="true"/>
            <input_port name="setX" required="true"/>
            <input_port name="setY" required="true"/>
            <input_port name="setZ" required="true"/>
            <input_port default="0" name="x" required="false"/>
            <input_port default="0" name="y" required="false"/>
            <input_port default="0" name="yaw" required="false"/>
            <input_port default="0" name="z" required="false"/>
        </Action>
        <Action ID="PublishInt8">
            <input_port name="data" required="true"/>
            <input_port name="topic" required="true"/>
        </Action>
        <Action ID="PublishToController">
            <input_port name="isOrientation" required="true"/>
            <input_port name="mode" required="true"/>
            <input_port name="x" required="true"/>
            <input_port name="y" required="true"/>
            <input_port name="z" required="true"/>
        </Action>
        <SubTree ID="RelativeMove">
            <input_port default="false" name="__shared_blackboard" required="false">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="frame_name" required="true">the frame to move relative to</input_port>
            <input_port name="op" required="true"/>
            <input_port name="or" required="true"/>
            <input_port name="oy" required="true"/>
            <input_port name="x" required="true"/>
            <input_port name="y" required="true"/>
            <input_port name="z" required="true"/>
        </SubTree>
        <Decorator ID="RetryUntilSuccessfulOrTimeout">
            <input_port name="num_seconds" required="true">number of seconds until abandonment.</input_port>
        </Decorator>
        <SubTree ID="Search">
            <input_port default="false" name="__shared_blackboard" required="false">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port default="4.0" name="max_dist" required="false"/>
            <input_port default="1.75" name="min_dist" required="false"/>
            <input_port name="object_name" required="false">Frame to search for</input_port>
            <input_port default="1.25" name="target_cov" required="false">Target covariance to end search</input_port>
            <input_port default="120" name="timeout_secs" required="false">Timeout for search</input_port>
        </SubTree>
        <SubTree ID="SetActuatorsArmed">
            <input_port default="false" name="__shared_blackboard" required="false">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="armed" required="true"/>
        </SubTree>
        <Action ID="SetControllerSafeMode">
            <input_port name="safe" required="true"/>
            <input_port name="timeout_secs" required="true"/>
        </Action>
        <Action ID="SetMappingTarget">
            <input_port name="lock_map" required="true"/>
            <input_port name="target_object" required="false"/>
            <input_port name="time_limit_secs" required="true"/>
        </Action>
        <Action ID="SetStatus">
            <input_port name="status" required="true"/>
        </Action>
        <SubTree ID="ShootAtStargate">
            <input_port default="false" name="__shared_blackboard" required="false">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="object_name" required="true"/>
        </SubTree>
        <SubTree ID="ShootObject">
            <input_port default="false" name="__shared_blackboard" required="false">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="object_name" required="true"/>
            <input_port default="talos/torpedo_link" name="torpedo_link_name" required="true"/>
        </SubTree>
        <SubTree ID="SmartMovePosition">
            <inout_port name="__shared_blackboard" required="true"/>
            <input_port name="x" required="true"/>
            <input_port name="y" required="true"/>
            <input_port name="z" required="true"/>
        </SubTree>
        <SubTree ID="SpinTree">
            <input_port default="false" name="__shared_blackboard" required="false">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="SurfaceTree"/>
        <SubTree ID="TorpedoTree"/>
        <Action ID="TransformPose">
            <input_port name="from_frame" required="true"/>
            <input_port name="op" required="true"/>
            <input_port name="or" required="true"/>
            <output_port name="out_op" required="false"/>
            <output_port name="out_or" required="false"/>
            <output_port name="out_oy" required="false"/>
            <output_port name="out_x" required="false"/>
            <output_port name="out_y" required="false"/>
            <output_port name="out_z" required="false"/>
            <input_port name="oy" required="true"/>
            <input_port name="to_frame" required="true"/>
            <input_port name="x" required="true"/>
            <input_port name="y" required="true"/>
            <input_port name="z" required="true"/>
        </Action>
        <Action ID="Wait">
            <input_port name="seconds" required="true">number of seconds to wait.</input_port>
        </Action>
        <SubTree ID="WaitForActuators">
            <inout_port name="__shared_blackboard" required="true"/>
            <inout_port name="timeout_secs" required="true"/>
        </SubTree>
        <Action ID="WaitForDetection">
            <input_port name="object_name" required="true"/>
            <input_port name="timeout_secs" required="true"/>
        </Action>
        <SubTree ID="WaitForKillSwitch"/>
        <Action ID="getCovariance">
            <output_port name="Covariance" required="false">Covariance of frame</output_port>
            <input_port name="Target" required="true">Frame to get covariance of</input_port>
        </Action>
    </TreeNodesModel>
    <!-- ////////// -->
</root>

