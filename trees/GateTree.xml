<?xml version="1.0"?>
<root main_tree_to_execute="BehaviorTree">
    <!-- ////////// -->
    <BehaviorTree ID="ArmTorpedos">
        <Sequence>
            <Action ID="Info" message="Arming Torpedos..."/>
            <Fallback>
                <Decorator ID="RetryUntilSuccessfulOrTimeout" num_seconds="5">
                    <Sequence>
                        <Action ID="Actuate" arm_torpedo="1" clear_dropper_status="" close_claw="" disarm_torpedo="" drop_1="" drop_2="" fire_torpedo_1="" fire_torpedo_2="" open_claw="" reset_actuators=""/>
                        <Action ID="Wait" seconds="1"/>
                        <SubTree ID="GetActuatorStates" __shared_blackboard="true"/>
                        <Inverter>
                            <Condition ID="IsTorpedoDisarmed" torpedo_state="{torpedo1_state}"/>
                        </Inverter>
                        <Inverter>
                            <Condition ID="IsTorpedoDisarmed" torpedo_state="{torpedo2_state}"/>
                        </Inverter>
                    </Sequence>
                </Decorator>
                <ForceFailure>
                    <Action ID="Error" message="Failed to arm torpedos!"/>
                </ForceFailure>
            </Fallback>
            <Action ID="Info" message="Torpedos Armed."/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="BehaviorTree">
        <Sequence>
            <SetBlackboard output_key="0" value="0"/>
            <SetBlackboard output_key="-3" value="-3"/>
            <SetBlackboard output_key="-1.75" value="-1.75"/>
            <SetBlackboard output_key="depth" value="-1"/>
            <SubTree ID="WaitForKillSwitch"/>
            <SubTree ID="Dive" __shared_blackboard="false" depth="depth"/>
            <ForceSuccess>
                <SubTree ID="GateTask"/>
            </ForceSuccess>
            <SubTree ID="KillController"/>
            <Action ID="Info" message="Routine finished!"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="BuoyTree">
        <Sequence>
            <Action ID="Info" message="BUOY TIME"/>
            <SetBlackboard output_key="0" value="0"/>
            <SetBlackboard output_key="3" value="3"/>
            <SetBlackboard output_key="badge_frame" value="badge_frame"/>
            <SubTree ID="DoSearch" __shared_blackboard="false" frame="badge_frame" proximity="3"/>
            <Action ID="TransformPose" from_frame="badge_frame" op="0" or="0" out_op="{gop}" out_or="{gor}" out_oy="{goy}" out_x="{gx}" out_y="{gy}" out_z="{gz}" oy="3.1415" to_frame="world" x="1" y="0" z="0"/>
            <SubTree ID="Move" __shared_blackboard="false" op="gop" or="gor" oy="goy" x="gx" y="gy" z="gz"/>
            <Action ID="PublishToController" isOrientation="0" mode="2" name="move forward" x="0.5" y="0" z="0"/>
            <Action ID="Wait" seconds="10"/>
            <SubTree ID="PrimitiveMovePosition" __shared_blackboard="false" x="gx" y="gy" z="gz"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="CloseClaw">
        <Fallback>
            <Sequence>
                <Decorator ID="RetryUntilSuccessfulOrTimeout" name="Wait for claw to close" num_seconds="7">
                    <Sequence>
                        <Action ID="Wait" seconds="1"/>
                        <Action ID="Info" message="Attempting to close claw..."/>
                        <Action ID="Actuate" arm_torpedo="" clear_dropper_status="" close_claw="1" disarm_torpedo="" drop_1="" drop_2="" fire_torpedo_1="" fire_torpedo_2="" open_claw="" reset_actuators=""/>
                        <SubTree ID="GetActuatorStates" __shared_blackboard="true"/>
                        <Fallback name="Check if claw is in error state">
                            <Inverter>
                                <Condition ID="IsClawError" claw_state="{claw_state}"/>
                            </Inverter>
                            <ForceFailure>
                                <Action ID="Error" message="Claw is in error state!"/>
                            </ForceFailure>
                        </Fallback>
                        <Condition ID="IsClawClosed" claw_state="{claw_state}"/>
                    </Sequence>
                </Decorator>
                <Action ID="Info" message="Claw closed."/>
            </Sequence>
            <ForceFailure>
                <Action ID="Error" message="Failed to close claw!"/>
            </ForceFailure>
        </Fallback>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="DisarmTorpedos">
        <Sequence>
            <Action ID="Info" message="Disarming Torpedos."/>
            <Fallback>
                <Decorator ID="RetryUntilSuccessfulOrTimeout" num_seconds="5">
                    <Sequence>
                        <Action ID="Actuate" arm_torpedo="" clear_dropper_status="" close_claw="" disarm_torpedo="1" drop_1="" drop_2="" fire_torpedo_1="" fire_torpedo_2="" open_claw="" reset_actuators=""/>
                        <SubTree ID="GetActuatorStates" __shared_blackboard="true"/>
                        <Fallback>
                            <Condition ID="IsTorpedoDisarmed" torpedo_state="{torpedo1_state}"/>
                            <Condition ID="IsTorpedoError" torpedo_state="{torpedo1_state}"/>
                        </Fallback>
                        <Fallback>
                            <Condition ID="IsTorpedoDisarmed" torpedo_state="{torpedo2_state}"/>
                            <Condition ID="IsTorpedoError" torpedo_state="{torpedo2_state}"/>
                        </Fallback>
                    </Sequence>
                </Decorator>
                <Action ID="Error" message="Failed to disarm torpedos!"/>
            </Fallback>
            <Action ID="Info" message="Disarmed torpedos."/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="Dive">
        <Sequence>
            <SetBlackboard output_key="0" value="0"/>
            <Action ID="GetOdometry" op="{op}" or="{or}" oy="{oy}" x="{x}" y="{y}" z="{z}"/>
            <Action ID="PublishToController" isOrientation="1" mode="3" x="0" y="0" z="{oy}"/>
            <SubTree ID="PrimitiveMovePosition" __shared_blackboard="false" x="x" y="y" z="depth"/>
            <SubTree ID="PrimitiveMoveOrientation" __shared_blackboard="false" p="0" r="0" y="oy"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="DoSearch">
        <Sequence>
            <Action ID="Info" message="Searching for prop"/>
            <Action ID="TransformPose" from_frame="{frame}" op="0" or="0" out_op="{op}" out_or="{or}" out_oy="{oy}" out_x="{x}" out_y="{y}" out_z="{z}" oy="3.1415" to_frame="world" x="{proximity}" y="0" z="0"/>
            <SubTree ID="Move" __shared_blackboard="false" op="op" or="or" oy="oy" x="x" y="y" z="z"/>
            <Action ID="Info" message="Letting mapping gather detections for a few seconds"/>
            <Action ID="Wait" name="Wait for mapping" seconds="5"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="Drop1">
        <Fallback>
            <Sequence>
                <Decorator ID="RetryUntilSuccessfulOrTimeout" name="Wait to see if it actually dropped" num_seconds="5">
                    <Sequence>
                        <Action ID="Wait" seconds="1"/>
                        <Action ID="Info" message="Attempting to drop dropper 1..."/>
                        <Action ID="Actuate" arm_torpedo="" clear_dropper_status="" close_claw="" disarm_torpedo="" drop_1="1" drop_2="" fire_torpedo_1="" fire_torpedo_2="" open_claw="" reset_actuators=""/>
                        <SubTree ID="GetActuatorStates" __shared_blackboard="true"/>
                        <Fallback name="Check if dropper is in error state">
                            <Inverter>
                                <Condition ID="IsDropperError" dropper_state="{dropper1_state}"/>
                            </Inverter>
                            <ForceFailure>
                                <Action ID="Error" message="Dropper 1 is in error state!"/>
                            </ForceFailure>
                        </Fallback>
                        <Condition ID="IsDropperDropped" dropper_state="{dropper1_state}"/>
                    </Sequence>
                </Decorator>
                <Action ID="Info" message="Successfully dropped dropper 1."/>
            </Sequence>
            <Action ID="Error" message="Failed to drop dropper 1!"/>
        </Fallback>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="Drop2">
        <SubTree ID="DropMarker" __shared_blackboard="false" dropper=""/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="DropMarker">
        <Fallback>
            <Sequence>
                <Decorator ID="RetryUntilSuccessfulOrTimeout" num_seconds="7">
                    <Sequence>
                        <Action ID="Wait" seconds="1"/>
                        <Action ID="Info" message="Attempting to drop dropper {dropper}..."/>
                        <IfThenElse>
                            <Condition ID="NumsEqual" a="{dropper}" b="1"/>
                            <Action ID="Actuate" arm_torpedo="" clear_dropper_status="" close_claw="" disarm_torpedo="" drop_1="1" drop_2="" fire_torpedo_1="" fire_torpedo_2="" open_claw="" reset_actuators=""/>
                            <Action ID="Actuate" arm_torpedo="" clear_dropper_status="" close_claw="" disarm_torpedo="" drop_1="" drop_2="1" fire_torpedo_1="" fire_torpedo_2="" open_claw="" reset_actuators=""/>
                        </IfThenElse>
                        <SubTree ID="GetActuatorStates" __shared_blackboard="true"/>
                        <IfThenElse>
                            <Condition ID="NumsEqual" a="{dropper}" b="1"/>
                            <SetBlackboard output_key="dropper_state" value="{dropper1_state}"/>
                            <SetBlackboard output_key="dropper_state" value="{dropper2_state}"/>
                        </IfThenElse>
                        <Fallback name="is dropper in an error state?">
                            <Inverter>
                                <Condition ID="IsDropperError" dropper_state="{dropper_state}"/>
                            </Inverter>
                            <ForceFailure>
                                <Action ID="Error" message="Dropper {dropper} is in an error state!"/>
                            </ForceFailure>
                        </Fallback>
                        <Condition ID="IsDropperDropped" dropper_state="{dropper_state}"/>
                    </Sequence>
                </Decorator>
                <Action ID="Info" message="Successfully dropped dropper {dropper}."/>
            </Sequence>
            <Action ID="Error" message="Failed to drop dropper {dropper}!"/>
        </Fallback>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="FireTorpedo">
        <Fallback>
            <Sequence>
                <Action ID="Info" message="Attempting to fire torpedo {torpedo_id}"/>
                <SubTree ID="GetTorpedoState" __shared_blackboard="false" torpedo_id="torpedo_id" torpedo_state="torpedo_state"/>
                <Inverter>
                    <Sequence>
                        <Condition ID="IsTorpedoFired" torpedo_state="{torpedo_state}"/>
                        <Action ID="Error" message="Torpedo {torpedo_id} is already fired!"/>
                    </Sequence>
                </Inverter>
                <SubTree ID="WaitForTorpedoCharged" __shared_blackboard="false" torpedo_id="torpedo_id"/>
                <Decorator ID="RetryUntilSuccessfulOrTimeout" num_seconds="10">
                    <Sequence name="Attempt to fire torpedo">
                        <SetBlackboard name="Set &quot;1&quot;" output_key="1" value="1"/>
                        <IfThenElse name="Select Torpedo">
                            <Condition ID="NumsEqual" a="1" b="{torpedo_id}"/>
                            <Action ID="Actuate" arm_torpedo="" clear_dropper_status="" close_claw="" disarm_torpedo="" drop_1="" drop_2="" fire_torpedo_1="1" fire_torpedo_2="" open_claw="" reset_actuators=""/>
                            <Action ID="Actuate" arm_torpedo="" clear_dropper_status="" close_claw="" disarm_torpedo="" drop_1="" drop_2="" fire_torpedo_1="" fire_torpedo_2="1" open_claw="" reset_actuators=""/>
                        </IfThenElse>
                        <Action ID="Wait" seconds="1"/>
                        <SubTree ID="GetTorpedoState" __shared_blackboard="false" torpedo_id="torpedo_id" torpedo_state="torpedo_state"/>
                        <Fallback>
                            <Condition ID="IsTorpedoFired" torpedo_state="{torpedo_state}"/>
                            <Sequence>
                                <Condition ID="IsTorpedoError" torpedo_state="{torpedo_state}"/>
                                <Action ID="Error" message="Torpedo {torpedo_id} is in an error state!"/>
                            </Sequence>
                        </Fallback>
                    </Sequence>
                </Decorator>
                <SubTree ID="GetTorpedoState" __shared_blackboard="false" torpedo_id="torpedo_id" torpedo_state="torpedo_state"/>
                <IfThenElse>
                    <Condition ID="IsTorpedoError" torpedo_state="{torpedo_state}"/>
                    <Action ID="Error" message="Failed to fire torpedo {torpedo_id}!"/>
                    <Action ID="Info" message="Successfully fired torpedo {torpedo_id}"/>
                </IfThenElse>
            </Sequence>
            <Action ID="Error" message="Failed to fire torpedo {torpedo_id}!"/>
        </Fallback>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="GateTask">
        <Sequence name="Gate Task Sequence">
            <Action ID="Info" message="GATE TIME"/>
            <SetBlackboard output_key="0" value="0"/>
            <SetBlackboard output_key="-1" value="-1"/>
            <SetBlackboard output_key="gman_frame" value="gman_frame"/>
            <SetBlackboard output_key="1.5" value="1.5"/>
            <SubTree ID="DoSearch" __shared_blackboard="false" frame="gman_frame" proximity="1.5"/>
            <Sequence name="Move in front of gate">
                <Action ID="TransformPose" from_frame="gman_frame" op="0" or="0" out_op="{gop}" out_or="{gor}" out_oy="{goy}" out_x="{gx}" out_y="{gy}" out_z="{gz}" oy="3.1415" to_frame="world" x="1" y="0" z="-0.5"/>
                <SubTree ID="Move" __shared_blackboard="false" op="gop" or="gor" oy="goy" x="gx" y="gy" z="gz"/>
            </Sequence>
            <Sequence name="Move under gate">
                <Action ID="TransformPose" from_frame="gman_frame" name=" Move under gman" op="0" or="0" out_op="{gop}" out_or="{gor}" out_oy="{goy}" out_x="{gx}" out_y="{gy}" out_z="{gz}" oy="3.1415" to_frame="world" x="0" y="0" z="-0.75"/>
                <SubTree ID="Move" __shared_blackboard="false" op="gop" or="gor" oy="goy" x="gx" y="gy" z="gz"/>
            </Sequence>
            <Action ID="Wait" name="Pre reset wait" seconds="5"/>
            <Action ID="GetOdometry" op="" or="" oy="{yaw}" x="" y="" z="{depth}"/>
            <Action ID="ResetOdom" op="0" or="0" oy="{yaw}" x="0" y="0" z="{depth}"/>
            <Action ID="PublishToController" isOrientation="0" mode="3" x="0" y="0" z="{gz}"/>
            <Action ID="Wait" name="Post reset wait" seconds="5"/>
            <Action ID="Math" a="{goy}" b="3.1415" operator="+" out="{spin_yaw}"/>
            <SubTree ID="PrimitiveMoveOrientation" __shared_blackboard="false" p="gop" r="gor" y="spin_yaw"/>
            <Sequence name="Big spin">
                <Action ID="Info" message="I live in spin"/>
                <SubTree ID="PrimitiveMoveOrientation" __shared_blackboard="false" p="gop" r="gor" y="goy"/>
            </Sequence>
            <SubTree ID="RelativeMove" __shared_blackboard="false" op="0" or="0" oy="0" x="0" y="-1" z="0"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="GetActuatorStates">
        <Fallback>
            <Decorator ID="RetryUntilSuccessfulOrTimeout" num_seconds="7">
                <Sequence>
                    <Action ID="GetActuatorStatus" claw_state="{claw_state}" dropper1_state="{dropper1_state}" dropper2_state="{dropper2_state}" torpedo1_state="{torpedo1_state}" torpedo2_state="{torpedo2_state}"/>
                </Sequence>
            </Decorator>
            <ForceFailure>
                <Action ID="Error" message="Failed to get actuator states!"/>
            </ForceFailure>
        </Fallback>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="GetTorpedoState">
        <Sequence>
            <SubTree ID="GetActuatorStates" __shared_blackboard="true"/>
            <IfThenElse name="Choose appropriate torpedo">
                <Condition ID="NumsEqual" a="1" b="{torpedo_id}"/>
                <SetBlackboard name="choose torpedo 1" output_key="torpedo_state" value="{torpedo1_state}"/>
                <SetBlackboard name="choose torpedo 2" output_key="torpedo_state" value="{torpedo2_state}"/>
            </IfThenElse>
            <ForceSuccess>
                <Sequence>
                    <Condition ID="IsTorpedoError" torpedo_state="{torpedo_state}"/>
                    <Action ID="Error" message="Torpedo {torpedo_id} is in an error state!"/>
                </Sequence>
            </ForceSuccess>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HelpfulMessage">
        <Sequence>
            <Action ID="Error" message="Hey if you guys need to change the parameters of the subtrees, make sure the number is &quot;defined&quot; in the &quot;defines&quot; tab in Groot beacuse BT is annoying. Also, ignore this error; I only made it an error so its distinctive. glhf -- Brach"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="KillController">
        <Sequence>
            <Action ID="PublishToController" isOrientation="1" mode="0" x="0" y="0" z="0"/>
            <Action ID="PublishToController" isOrientation="0" mode="0" x="0" y="0" z="0"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="LessCoolTorpedoAlign">
        <Sequence name="Less cool align">
            <Action ID="TransformPose" from_frame="tempest/torpedo_link" name="get torpedo in origin frame" op="0" or="0" out_op="" out_or="" out_oy="" out_x="" out_y="{torp_y}" out_z="{torp_z}" oy="0" to_frame="tempest/base_link" x="0" y="0" z="0"/>
            <Action ID="Math" a="0" b="{torp_z}" operator="-" out="{prop_z}"/>
            <Action ID="TransformPose" from_frame="torpedoHole_frame" op="0" or="0" out_op="{op}" out_or="{or}" out_oy="{oy}" out_x="{x}" out_y="{y}" out_z="{z}" oy="3.1415" to_frame="world" x="0.5" y="{torp_y}" z="{prop_z}"/>
            <SubTree ID="Move" __shared_blackboard="false" op="op" or="or" oy="oy" x="x" y="y" z="z"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="Move">
        <Sequence>
            <Action ID="Info" message="Moving to XYZ {x}, {y}, {z} with RPY {or}, {op}, {oy}"/>
            <SetBlackboard output_key="0" value="0"/>
            <Action ID="GetOdometry" op="{cop}" or="{cor}" oy="{coy}" x="{cx}" y="{cy}" z="{cz}"/>
            <Action ID="CalculateDistance" dist="{dist}" x1="{cx}" x2="{x}" y1="{cy}" y2="{y}" z1="0" z2="0"/>
            <IfThenElse name="have robot face goal point if far away from it">
                <Condition ID="CompareNums" a="{dist}" b="0.75" test="&gt;"/>
                <Sequence name="Get yaw to face towards goal point">
                    <Action ID="HeadingToPoint" currX="{cx}" currY="{cy}" heading="{yaw}" targX="{x}" targY="{y}"/>
                    <SetBlackboard output_key="goal_yaw" value="{yaw}"/>
                </Sequence>
                <Sequence>
                    <SetBlackboard output_key="goal_yaw" value="{coy}"/>
                </Sequence>
            </IfThenElse>
            <SubTree ID="PrimitiveMovePosition" __shared_blackboard="false" x="cx" y="cy" z="cz"/>
            <SubTree ID="PrimitiveMoveOrientation" __shared_blackboard="false" p="0" r="0" y="goal_yaw"/>
            <SubTree ID="PrimitiveMovePosition" __shared_blackboard="false" x="x" y="y" z="z"/>
            <SubTree ID="PrimitiveMoveOrientation" __shared_blackboard="false" p="or" r="op" y="oy"/>
            <Action ID="Wait" seconds="2"/>
            <Action ID="Info" message="Move Complete."/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="MoveRelativeToObject">
        <Sequence>
            <Action ID="TransformPose" from_frame="{frame}" op="0" or="0" out_op="{t_pitch}" out_or="{t_roll}" out_oy="{t_yaw}" out_x="{t_x}" out_y="{t_y}" out_z="{t_z}" oy="{yaw}" to_frame="world" x="{x}" y="{y}" z="{z}"/>
            <SubTree ID="Move" __shared_blackboard="false" op="t_pitch" or="t_roll" oy="t_yaw" x="t_x" y="t_y" z="z"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="OpenClaw">
        <Fallback>
            <Sequence>
                <Decorator ID="RetryUntilSuccessfulOrTimeout" name="Wait for claw to open" num_seconds="7">
                    <Sequence>
                        <Action ID="Wait" seconds="1"/>
                        <Action ID="Info" message="Attempting to open claw..."/>
                        <Action ID="Actuate" arm_torpedo="" clear_dropper_status="" close_claw="" disarm_torpedo="" drop_1="" drop_2="" fire_torpedo_1="" fire_torpedo_2="" open_claw="1" reset_actuators=""/>
                        <SubTree ID="GetActuatorStates" __shared_blackboard="true"/>
                        <Fallback name="Check if claw is in error state">
                            <Inverter>
                                <Condition ID="IsClawError" claw_state="{claw_state}"/>
                            </Inverter>
                            <ForceFailure>
                                <Action ID="Error" message="Claw is in error state!"/>
                            </ForceFailure>
                        </Fallback>
                        <Condition ID="IsClawOpen" claw_state="{claw_state}"/>
                    </Sequence>
                </Decorator>
                <Action ID="Info" message="Claw opened."/>
            </Sequence>
            <ForceFailure name="Forces subtree to fail">
                <Action ID="Error" message="Failed to open claw!"/>
            </ForceFailure>
        </Fallback>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PrimitiveMoveOrientation">
        <Sequence>
            <Action ID="Info" message="Rotating to RPY {r}, {p}, {y}"/>
            <Fallback>
                <Decorator ID="RetryUntilSuccessfulOrTimeout" num_seconds="10">
                    <Sequence>
                        <Action ID="PublishToController" isOrientation="1" mode="3" x="{r}" y="{p}" z="{y}"/>
                        <Action ID="GetOdometry" name="Get Current RPY" op="{cp}" or="{cr}" oy="{cy}" x="" y="" z=""/>
                        <Condition ID="ApproxEqualTo" a="{cr}" b="{r}" name="At goal roll?" range="0.25"/>
                        <Condition ID="ApproxEqualTo" a="{cp}" b="{p}" name="At goal pitch?" range="0.25"/>
                        <Condition ID="ApproxEqualTo" a="{cy}" b="{y}" name="At goal yaw?" range="0.25"/>
                    </Sequence>
                </Decorator>
                <ForceSuccess>
                    <Sequence>
                        <Action ID="GetOdometry" op="{cr}" or="{cp}" oy="{cy}" x="" y="" z=""/>
                        <Action ID="Error" message="Couldn't bring Tempest to the desired orientation! Wanted {r}, {p}, {y} but got {cr}, {cp}, {cy}. Moving on anyway."/>
                    </Sequence>
                </ForceSuccess>
            </Fallback>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PrimitiveMovePosition">
        <Sequence>
            <Action ID="Info" message="Translating to XYZ: {x}, {y}, {z}"/>
            <Fallback>
                <Decorator ID="RetryUntilSuccessfulOrTimeout" num_seconds="30">
                    <Sequence>
                        <Action ID="PublishToController" isOrientation="0" mode="3" x="{x}" y="{y}" z="{z}"/>
                        <Action ID="GetOdometry" name="Get Current XYZ" op="" or="" oy="" x="{cx}" y="{cy}" z="{cz}"/>
                        <Action ID="CalculateDistance" dist="{dist}" x1="{x}" x2="{cx}" y1="{y}" y2="{cy}" z1="{z}" z2="{cz}"/>
                        <Condition ID="CompareNums" a="{dist}" b="0.25" name="At goal point?" test="&lt;"/>
                    </Sequence>
                </Decorator>
                <ForceSuccess>
                    <Sequence>
                        <Action ID="GetOdometry" op="" or="" oy="" x="{cx}" y="{cy}" z="{cz}"/>
                        <Action ID="Error" message="Failed to move to position! Wanted {x}, {y}, {z} but got {cx}, {cy}, {cz}"/>
                    </Sequence>
                </ForceSuccess>
            </Fallback>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="RelativeMove">
        <Sequence>
            <Action ID="GetOdometry" op="{cop}" or="{cor}" oy="{coy}" x="{cx}" y="{cy}" z="{cz}"/>
            <Action ID="Math" a="{cor}" b="{or}" operator="+" out="{gor}"/>
            <Action ID="Math" a="{cop}" b="{op}" operator="+" out="{gop}"/>
            <Action ID="Math" a="{coy}" b="{oy}" operator="+" out="{goy}"/>
            <Action ID="Math" a="{cx}" b="{x}" operator="+" out="{gx}"/>
            <Action ID="Math" a="{cy}" b="{y}" operator="+" out="{gy}"/>
            <Action ID="Math" a="{cz}" b="{z}" operator="+" out="{gz}"/>
            <SubTree ID="Move" __shared_blackboard="false" op="cop" or="cor" oy="coy" x="cx" y="cy" z="cz"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="SurfaceTree">
        <Sequence>
            <Action ID="Info" message="SURFACING TIME"/>
            <SetBlackboard output_key="0.25" value="0.25"/>
            <Action ID="TransformPose" from_frame="cash_frame" op="0" or="0" out_op="{op}" out_or="{or}" out_oy="{oy}" out_x="{x}" out_y="{y}" out_z="{z}" oy="0" to_frame="world" x="0" y="0" z="0"/>
            <SubTree ID="Move" __shared_blackboard="false" op="op" or="or" oy="oy" x="x" y="y" z="z"/>
            <SubTree ID="Move" __shared_blackboard="false" op="op" or="or" oy="oy" x="x" y="y" z="0.25"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="TorpedoTree">
        <Sequence>
            <Action ID="Info" message="TORPEDO TIME"/>
            <SetBlackboard output_key="1" value="1"/>
            <SetBlackboard output_key="2" value="2"/>
            <SetBlackboard output_key="frame" value="torpedoGman_frame"/>
            <SetBlackboard output_key="4" value="4"/>
            <SubTree ID="DoSearch" __shared_blackboard="false" frame="frame" proximity="4"/>
            <Action ID="TransformPose" from_frame="torpedoGman_frame" op="0" or="0" out_op="{op}" out_or="{or}" out_oy="{oy}" out_x="{x}" out_y="{y}" out_z="{z}" oy="3.1415" to_frame="world" x="1" y="0" z="0"/>
            <SubTree ID="Move" __shared_blackboard="false" op="op" or="or" oy="oy" x="x" y="y" z="z"/>
            <ForceSuccess>
                <SubTree ID="ArmTorpedos"/>
            </ForceSuccess>
            <SubTree ID="LessCoolTorpedoAlign"/>
            <ForceSuccess>
                <Sequence>
                    <SubTree ID="FireTorpedo" __shared_blackboard="false" torpedo_id="1"/>
                    <SubTree ID="FireTorpedo" __shared_blackboard="false" torpedo_id="2"/>
                    <SubTree ID="PrimitiveMovePosition" __shared_blackboard="false" x="x" y="y" z="z"/>
                    <SubTree ID="DisarmTorpedos"/>
                </Sequence>
            </ForceSuccess>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="WaitForKillSwitch">
        <Sequence>
            <Action ID="Info" message="Waiting for kill switch insert..."/>
            <Action ID="Wait" seconds="5"/>
            <RetryUntilSuccessful num_attempts="-1">
                <Sequence>
                    <Action ID="GetSwitchState" aux_switch_inserted="" kill_switch_inserted="kill_switch_inserted"/>
                    <Condition ID="IsTrue" value="{kill_switch_inserted}"/>
                    <Action ID="Info" message="KILL SWITCH INSERTED, TREE STARTING IN 5 SECONDS"/>
                </Sequence>
            </RetryUntilSuccessful>
            <Action ID="Wait" seconds="5"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="WaitForTorpedoCharged">
        <Sequence>
            <Action ID="Info" message="Waiting for torpedo {torpedo_id} to charge."/>
            <SetBlackboard name="Set &quot;1&quot;" output_key="1" value="1"/>
            <Decorator ID="RetryUntilSuccessfulOrTimeout" name="Wait until charged or error" num_seconds="30">
                <Sequence>
                    <Action ID="Wait" seconds="1"/>
                    <SubTree ID="GetTorpedoState" __shared_blackboard="false" torpedo_id="torpedo_id" torpedo_state="torpedo_state"/>
                    <Fallback name="assess state">
                        <Condition ID="IsTorpedoCharged" torpedo_state="{torpedo_state}"/>
                        <Condition ID="IsTorpedoError" torpedo_state="{torpedo_state}"/>
                    </Fallback>
                </Sequence>
            </Decorator>
            <SubTree ID="GetTorpedoState" __shared_blackboard="false" torpedo_id="torpedo_id" torpedo_state="torpedo_state"/>
            <Fallback>
                <Condition ID="IsTorpedoCharged" torpedo_state="{torpedo_state}"/>
                <ForceFailure>
                    <Action ID="Error" message="Torpedo {torpedo_id} failed to charge!"/>
                </ForceFailure>
            </Fallback>
            <Action ID="Info" message="Torpedo {torpedo_id} charged."/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <TreeNodesModel>
        <Action ID="Actuate">
            <input_port name="arm_torpedo"/>
            <input_port name="clear_dropper_status"/>
            <input_port name="close_claw"/>
            <input_port name="disarm_torpedo"/>
            <input_port name="drop_1"/>
            <input_port name="drop_2"/>
            <input_port name="fire_torpedo_1"/>
            <input_port name="fire_torpedo_2"/>
            <input_port name="open_claw"/>
            <input_port name="reset_actuators"/>
        </Action>
        <Action ID="ActuateState">
            <input_port name="arm_torpedo"/>
            <input_port name="clear_dropper_status"/>
            <input_port name="close_claw"/>
            <input_port name="disarm_torpedo"/>
            <input_port name="drop_1"/>
            <input_port name="drop_2"/>
            <input_port name="fire_torpedo_1"/>
            <input_port name="fire_torpedo_2"/>
            <input_port name="open_claw"/>
            <input_port name="reset_actuators"/>
        </Action>
        <Action ID="AlignTorpedos">
            <input_port name="current_distance"/>
            <input_port name="goal_distance"/>
            <input_port name="timeout"/>
            <output_port name="x"/>
            <output_port name="y"/>
            <output_port name="z"/>
        </Action>
        <Condition ID="ApproxEqualTo">
            <input_port name="a"/>
            <input_port name="b"/>
            <input_port name="range"/>
        </Condition>
        <SubTree ID="ArmTorpedos"/>
        <Action ID="BigMoveState">
            <input_port default="1" name="orientation_w">optional</input_port>
            <input_port default="0" name="orientation_x">optional</input_port>
            <input_port default="0" name="orientation_y">optional</input_port>
            <input_port default="0" name="orientation_z">optional</input_port>
            <input_port name="v_pitch">optional</input_port>
            <input_port name="v_roll">optional</input_port>
            <input_port name="v_yaw">optional</input_port>
            <input_port default="0" name="x">optional</input_port>
            <input_port default="0" name="y">optional</input_port>
            <input_port default="-1" name="z">optional</input_port>
        </Action>
        <SubTree ID="BuoyTree"/>
        <Action ID="CalculateDistance">
            <output_port name="dist"/>
            <input_port name="x1"/>
            <input_port name="x2"/>
            <input_port name="y1"/>
            <input_port name="y2"/>
            <input_port name="z1"/>
            <input_port name="z2"/>
        </Action>
        <Condition ID="CompareNums">
            <input_port name="a"/>
            <input_port name="b"/>
            <input_port name="test">can be &quot;&lt;&quot;, &quot;&gt;&quot;, or &quot;=&quot;.</input_port>
        </Condition>
        <Action ID="ComputeYawAngle">
            <output_port name="output"/>
            <input_port name="x"/>
            <input_port name="y"/>
        </Action>
        <SubTree ID="DisarmTorpedos"/>
        <SubTree ID="Dive">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="depth">depth to submerge to</input_port>
        </SubTree>
        <SubTree ID="DoSearch">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="frame">Prop to search for (ex. gman)</input_port>
            <input_port name="proximity">Proximity to prop estimate to search</input_port>
        </SubTree>
        <SubTree ID="DropMarker">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="dropper">marker dropper ID. 1 or 2</input_port>
        </SubTree>
        <Action ID="Error">
            <input_port name="message">The message to print.</input_port>
        </Action>
        <SubTree ID="FireTorpedo">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="torpedo_id"/>
        </SubTree>
        <Action ID="FlattenCalculationState">
            <input_port default="-1" name="depth">Depth the robot sinks to. Required</input_port>
            <output_port default="1" name="orientation_w"/>
            <output_port default="0" name="orientation_x"/>
            <output_port default="0" name="orientation_y"/>
            <output_port default="0" name="orientation_z"/>
            <output_port default="0" name="x"/>
            <output_port default="0" name="y"/>
            <output_port default="-1" name="z"/>
        </Action>
        <SubTree ID="GateTask"/>
        <SubTree ID="GetActuatorStates">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <Action ID="GetActuatorStatus">
            <output_port name="claw_state"/>
            <output_port name="dropper1_state"/>
            <output_port name="dropper2_state"/>
            <output_port name="torpedo1_state"/>
            <output_port name="torpedo2_state"/>
        </Action>
        <Action ID="GetOdometry">
            <output_port name="op"/>
            <output_port name="or"/>
            <output_port name="oy"/>
            <output_port name="x"/>
            <output_port name="y"/>
            <output_port name="z"/>
        </Action>
        <Action ID="GetSwitchState">
            <inout_port name="aux_switch_inserted"/>
            <inout_port name="kill_switch_inserted"/>
        </Action>
        <SubTree ID="GetTorpedoState">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="torpedo_id"/>
            <output_port name="torpedo_state"/>
        </SubTree>
        <Action ID="HeadingToPoint">
            <input_port name="currX"/>
            <input_port name="currY"/>
            <output_port name="heading"/>
            <input_port name="targX"/>
            <input_port name="targY"/>
        </Action>
        <SubTree ID="HelpfulMessage"/>
        <Action ID="Info">
            <input_port name="message">The message to print.</input_port>
        </Action>
        <Condition ID="IsClawClosed">
            <input_port name="claw_state"/>
        </Condition>
        <Condition ID="IsClawError">
            <input_port name="claw_state"/>
        </Condition>
        <Condition ID="IsClawOpen">
            <input_port name="claw_state"/>
        </Condition>
        <Condition ID="IsClawUnknown">
            <input_port name="claw_state"/>
        </Condition>
        <Condition ID="IsDropperDropped">
            <input_port name="dropper_state"/>
        </Condition>
        <Condition ID="IsDropperError">
            <input_port name="dropper_state"/>
        </Condition>
        <Condition ID="IsDropperReady">
            <input_port name="dropper_state"/>
        </Condition>
        <Condition ID="IsTorpedoCharged">
            <input_port name="torpedo_state"/>
        </Condition>
        <Condition ID="IsTorpedoCharging">
            <input_port name="torpedo_state"/>
        </Condition>
        <Condition ID="IsTorpedoDisarmed">
            <input_port name="torpedo_state"/>
        </Condition>
        <Condition ID="IsTorpedoError">
            <input_port name="torpedo_state"/>
        </Condition>
        <Condition ID="IsTorpedoFired">
            <input_port name="torpedo_state"/>
        </Condition>
        <Condition ID="IsTrue">
            <input_port name="value"/>
        </Condition>
        <SubTree ID="KillController"/>
        <SubTree ID="LessCoolTorpedoAlign"/>
        <Action ID="Math">
            <input_port name="a"/>
            <input_port name="b"/>
            <input_port default="+" name="operator">can be &quot;+&quot;, &quot;-&quot;, &quot;*&quot;, or &quot;/&quot;. Node will compute a &quot;op b. For example, if the operator is &quot;-&quot;, output will be a - b.</input_port>
            <output_port name="out"/>
        </Action>
        <SubTree ID="Move">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="op"/>
            <input_port name="or"/>
            <input_port name="oy"/>
            <input_port name="x"/>
            <input_port name="y"/>
            <input_port name="z"/>
        </SubTree>
        <SubTree ID="MoveRelativeToObject">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="frame">frame to move relative to</input_port>
            <input_port name="x">relative X</input_port>
            <input_port name="y">relative Y</input_port>
            <input_port name="yaw">relative yaw</input_port>
            <input_port name="z">relative Z</input_port>
        </SubTree>
        <Condition ID="NumsEqual">
            <input_port name="a"/>
            <input_port name="b"/>
        </Condition>
        <SubTree ID="PrimitiveMoveOrientation">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="p"/>
            <input_port name="r"/>
            <input_port name="y"/>
        </SubTree>
        <SubTree ID="PrimitiveMovePosition">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="x"/>
            <input_port name="y"/>
            <input_port name="z"/>
        </SubTree>
        <Action ID="PublishToController">
            <input_port name="isOrientation"/>
            <input_port name="mode"/>
            <input_port name="x"/>
            <input_port name="y"/>
            <input_port name="z"/>
        </Action>
        <SubTree ID="RelativeMove">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="op"/>
            <input_port name="or"/>
            <input_port name="oy"/>
            <input_port name="x"/>
            <input_port name="y"/>
            <input_port name="z"/>
        </SubTree>
        <Action ID="ResetOdom">
            <input_port default="0" name="op">new EKF pose pitch</input_port>
            <input_port default="0" name="or">new EKF pose roll</input_port>
            <input_port default="0" name="oy">new EKF pose yaw</input_port>
            <input_port default="0" name="x">new EKF pose X</input_port>
            <input_port default="0" name="y">new EKF pose Y</input_port>
            <input_port default="0" name="z">new EKF pose Z</input_port>
        </Action>
        <Decorator ID="RetryUntilSuccessfulOrTimeout">
            <input_port name="num_seconds">number of seconds until abandonment.</input_port>
        </Decorator>
        <Action ID="Search">
            <input_port name="frame">The frame to search for</input_port>
            <input_port name="target_error">The goal amount of error for the state to succeed.</input_port>
            <input_port name="update_sec">How much time to wait for update</input_port>
        </Action>
        <Action ID="SearchState">
            <input_port name="frame">The frame to search for</input_port>
            <input_port name="target_error">The goal amount of error for the state to succeed.</input_port>
            <input_port name="update_sec">How much time to wait for update</input_port>
        </Action>
        <Action ID="ShootTorpedoState"/>
        <SubTree ID="SurfaceTree"/>
        <Action ID="ToString">
            <input_port name="double_in">optional. use if value is a double</input_port>
            <input_port name="int_in">optional. use if value is a string</input_port>
            <output_port name="str_out">output.</output_port>
        </Action>
        <Action ID="ToWorldFrameState">
            <input_port name="object">Object to calculate relative to. Required.</input_port>
            <input_port name="relative_orientation_w">Orienation is relative to object. Required.</input_port>
            <input_port name="relative_orientation_x">Required</input_port>
            <input_port name="relative_orientation_y">Required</input_port>
            <input_port name="relative_orientation_z">Required</input_port>
            <input_port name="relative_x">Position is also relative to object. Required.</input_port>
            <input_port name="relative_y">Required</input_port>
            <input_port name="relative_z">Required</input_port>
            <output_port name="world_orientation_w"/>
            <output_port name="world_orientation_x"/>
            <output_port name="world_orientation_y"/>
            <output_port name="world_orientation_z"/>
            <output_port name="world_x"/>
            <output_port name="world_y"/>
            <output_port name="world_z"/>
        </Action>
        <SubTree ID="TorpedoTree"/>
        <Action ID="TransformPose">
            <input_port name="from_frame"/>
            <input_port name="op"/>
            <input_port name="or"/>
            <output_port name="out_op"/>
            <output_port name="out_or"/>
            <output_port name="out_oy"/>
            <output_port name="out_x"/>
            <output_port name="out_y"/>
            <output_port name="out_z"/>
            <input_port name="oy"/>
            <input_port name="to_frame"/>
            <input_port name="x"/>
            <input_port name="y"/>
            <input_port name="z"/>
        </Action>
        <Action ID="VelocityState">
            <input_port default="1" name="time">Time to drive for. Required</input_port>
            <input_port default="1" name="x_velocity">Required</input_port>
            <input_port default="0" name="y_velocity">Required</input_port>
            <input_port default="0" name="z_velocity">Required</input_port>
        </Action>
        <Action ID="Wait">
            <input_port name="seconds">number of seconds to wait.</input_port>
        </Action>
        <SubTree ID="WaitForKillSwitch"/>
        <SubTree ID="WaitForTorpedoCharged">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="torpedo_id"/>
        </SubTree>
        <Action ID="WaitState">
            <input_port name="seconds">number of seconds to wait.</input_port>
        </Action>
    </TreeNodesModel>
    <!-- ////////// -->
</root>
