<?xml version="1.0"?>
<root main_tree_to_execute="BehaviorTree">
    <!-- ////////// -->
    <BehaviorTree ID="ArmTorpedos">
        <Sequence>
            <Action ID="Info" message="Arming Torpedos..."/>
            <Fallback>
                <Decorator ID="RetryUntilSuccessfulOrTimeout" num_seconds="5">
                    <Sequence>
                        <Action ID="Actuate" arm_torpedo="1" clear_dropper_status="" close_claw="" disarm_torpedo="" drop_1="" drop_2="" fire_torpedo_1="" fire_torpedo_2="" open_claw="" reset_actuators=""/>
                        <Action ID="Wait" seconds="1"/>
                        <SubTree ID="GetActuatorStates" __shared_blackboard="true"/>
                        <Inverter>
                            <Condition ID="IsTorpedoDisarmed" torpedo_state="{torpedo1_state}"/>
                        </Inverter>
                        <Inverter>
                            <Condition ID="IsTorpedoDisarmed" torpedo_state="{torpedo2_state}"/>
                        </Inverter>
                    </Sequence>
                </Decorator>
                <ForceFailure>
                    <Action ID="Error" message="Failed to arm torpedos!"/>
                </ForceFailure>
            </Fallback>
            <Action ID="Info" message="Torpedos Armed."/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="BehaviorTree">
        <Sequence>
            <Action ID="Info" message="Begin BT"/>
            <SetBlackboard output_key="1" value="1"/>
            <SetBlackboard output_key="2" value="2"/>
            <Action ID="Info" message="Fire 1"/>
            <ForceSuccess>
                <SubTree ID="ArmTorpedos"/>
            </ForceSuccess>
            <ForceSuccess>
                <SubTree ID="FireTorpedo" __shared_blackboard="false" torpedo_id="1"/>
            </ForceSuccess>
            <Action ID="Info" message="Fire 2"/>
            <ForceSuccess>
                <SubTree ID="FireTorpedo" __shared_blackboard="false" torpedo_id="2"/>
            </ForceSuccess>
            <ForceSuccess>
                <SubTree ID="DisarmTorpedos"/>
            </ForceSuccess>
            <Action ID="Wait" seconds="5"/>
            <Action ID="Info" message="Drop 1"/>
            <ForceSuccess>
                <SubTree ID="DropMarker" __shared_blackboard="false" dropper="1"/>
            </ForceSuccess>
            <Action ID="Wait" seconds="5"/>
            <Action ID="Info" message="Drop 2"/>
            <ForceSuccess>
                <SubTree ID="DropMarker" __shared_blackboard="false" dropper="2"/>
            </ForceSuccess>
            <Action ID="Info" message="End BT"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="CloseClaw">
        <Fallback>
            <Sequence>
                <Decorator ID="RetryUntilSuccessfulOrTimeout" name="Wait for claw to close" num_seconds="7">
                    <Sequence>
                        <Action ID="Wait" seconds="1"/>
                        <Action ID="Info" message="Attempting to close claw..."/>
                        <Action ID="Actuate" arm_torpedo="" clear_dropper_status="" close_claw="1" disarm_torpedo="" drop_1="" drop_2="" fire_torpedo_1="" fire_torpedo_2="" open_claw="" reset_actuators=""/>
                        <SubTree ID="GetActuatorStates" __shared_blackboard="true"/>
                        <Fallback name="Check if claw is in error state">
                            <Inverter>
                                <Condition ID="IsClawError" claw_state="{claw_state}"/>
                            </Inverter>
                            <ForceFailure>
                                <Action ID="Error" message="Claw is in error state!"/>
                            </ForceFailure>
                        </Fallback>
                        <Condition ID="IsClawClosed" claw_state="{claw_state}"/>
                    </Sequence>
                </Decorator>
                <Action ID="Info" message="Claw closed."/>
            </Sequence>
            <ForceFailure>
                <Action ID="Error" message="Failed to close claw!"/>
            </ForceFailure>
        </Fallback>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="DisarmTorpedos">
        <Sequence>
            <Action ID="Info" message="Disarming Torpedos."/>
            <Fallback>
                <Decorator ID="RetryUntilSuccessfulOrTimeout" num_seconds="5">
                    <Sequence>
                        <Action ID="Actuate" arm_torpedo="" clear_dropper_status="" close_claw="" disarm_torpedo="1" drop_1="" drop_2="" fire_torpedo_1="" fire_torpedo_2="" open_claw="" reset_actuators=""/>
                        <SubTree ID="GetActuatorStates" __shared_blackboard="true"/>
                        <Fallback>
                            <Condition ID="IsTorpedoDisarmed" torpedo_state="{torpedo1_state}"/>
                            <Condition ID="IsTorpedoError" torpedo_state="{torpedo1_state}"/>
                        </Fallback>
                        <Fallback>
                            <Condition ID="IsTorpedoDisarmed" torpedo_state="{torpedo2_state}"/>
                            <Condition ID="IsTorpedoError" torpedo_state="{torpedo2_state}"/>
                        </Fallback>
                    </Sequence>
                </Decorator>
                <Action ID="Error" message="Failed to disarm torpedos!"/>
            </Fallback>
            <Action ID="Info" message="Disarmed torpedos."/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="Drop1">
        <Fallback>
            <Sequence>
                <Decorator ID="RetryUntilSuccessfulOrTimeout" name="Wait to see if it actually dropped" num_seconds="5">
                    <Sequence>
                        <Action ID="Wait" seconds="1"/>
                        <Action ID="Info" message="Attempting to drop dropper 1..."/>
                        <Action ID="Actuate" arm_torpedo="" clear_dropper_status="" close_claw="" disarm_torpedo="" drop_1="1" drop_2="" fire_torpedo_1="" fire_torpedo_2="" open_claw="" reset_actuators=""/>
                        <SubTree ID="GetActuatorStates" __shared_blackboard="true"/>
                        <Fallback name="Check if dropper is in error state">
                            <Inverter>
                                <Condition ID="IsDropperError" dropper_state="{dropper1_state}"/>
                            </Inverter>
                            <ForceFailure>
                                <Action ID="Error" message="Dropper 1 is in error state!"/>
                            </ForceFailure>
                        </Fallback>
                        <Condition ID="IsDropperDropped" dropper_state="{dropper1_state}"/>
                    </Sequence>
                </Decorator>
                <Action ID="Info" message="Successfully dropped dropper 1."/>
            </Sequence>
            <Action ID="Error" message="Failed to drop dropper 1!"/>
        </Fallback>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="Drop2">
        <SubTree ID="DropMarker" __shared_blackboard="false" dropper=""/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="DropMarker">
        <Fallback>
            <Sequence>
                <Decorator ID="RetryUntilSuccessfulOrTimeout" num_seconds="7">
                    <Sequence>
                        <Action ID="Wait" seconds="1"/>
                        <Action ID="Info" message="Attempting to drop dropper {dropper}..."/>
                        <IfThenElse>
                            <Condition ID="NumsEqual" a="{dropper}" b="1"/>
                            <Action ID="Actuate" arm_torpedo="" clear_dropper_status="" close_claw="" disarm_torpedo="" drop_1="1" drop_2="" fire_torpedo_1="" fire_torpedo_2="" open_claw="" reset_actuators=""/>
                            <Action ID="Actuate" arm_torpedo="" clear_dropper_status="" close_claw="" disarm_torpedo="" drop_1="" drop_2="1" fire_torpedo_1="" fire_torpedo_2="" open_claw="" reset_actuators=""/>
                        </IfThenElse>
                        <SubTree ID="GetActuatorStates" __shared_blackboard="true"/>
                        <IfThenElse>
                            <Condition ID="NumsEqual" a="{dropper}" b="1"/>
                            <SetBlackboard output_key="dropper_state" value="{dropper1_state}"/>
                            <SetBlackboard output_key="dropper_state" value="{dropper2_state}"/>
                        </IfThenElse>
                        <Fallback name="is dropper in an error state?">
                            <Inverter>
                                <Condition ID="IsDropperError" dropper_state="{dropper_state}"/>
                            </Inverter>
                            <ForceFailure>
                                <Action ID="Error" message="Dropper {dropper} is in an error state!"/>
                            </ForceFailure>
                        </Fallback>
                        <Condition ID="IsDropperDropped" dropper_state="{dropper_state}"/>
                    </Sequence>
                </Decorator>
                <Action ID="Info" message="Successfully dropped dropper {dropper}."/>
            </Sequence>
            <Action ID="Error" message="Failed to drop dropper {dropper}!"/>
        </Fallback>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="FireTorpedo">
        <Fallback>
            <Sequence>
                <Action ID="Info" message="Attempting to fire torpedo {torpedo_id}"/>
                <SubTree ID="GetTorpedoState" __shared_blackboard="false" torpedo_id="torpedo_id" torpedo_state="torpedo_state"/>
                <Inverter>
                    <Sequence>
                        <Condition ID="IsTorpedoFired" torpedo_state="{torpedo_state}"/>
                        <Action ID="Error" message="Torpedo {torpedo_id} is already fired!"/>
                    </Sequence>
                </Inverter>
                <SubTree ID="WaitForTorpedoCharged" __shared_blackboard="false" torpedo_id="torpedo_id"/>
                <Decorator ID="RetryUntilSuccessfulOrTimeout" num_seconds="10">
                    <Sequence name="Attempt to fire torpedo">
                        <SetBlackboard name="Set &quot;1&quot;" output_key="1" value="1"/>
                        <IfThenElse name="Select Torpedo">
                            <Condition ID="NumsEqual" a="1" b="{torpedo_id}"/>
                            <Action ID="Actuate" arm_torpedo="" clear_dropper_status="" close_claw="" disarm_torpedo="" drop_1="" drop_2="" fire_torpedo_1="1" fire_torpedo_2="" open_claw="" reset_actuators=""/>
                            <Action ID="Actuate" arm_torpedo="" clear_dropper_status="" close_claw="" disarm_torpedo="" drop_1="" drop_2="" fire_torpedo_1="" fire_torpedo_2="1" open_claw="" reset_actuators=""/>
                        </IfThenElse>
                        <Action ID="Wait" seconds="1"/>
                        <SubTree ID="GetTorpedoState" __shared_blackboard="false" torpedo_id="torpedo_id" torpedo_state="torpedo_state"/>
                        <Fallback>
                            <Condition ID="IsTorpedoFired" torpedo_state="{torpedo_state}"/>
                            <Sequence>
                                <Condition ID="IsTorpedoError" torpedo_state="{torpedo_state}"/>
                                <Action ID="Error" message="Torpedo {torpedo_id} is in an error state!"/>
                            </Sequence>
                        </Fallback>
                    </Sequence>
                </Decorator>
                <SubTree ID="GetTorpedoState" __shared_blackboard="false" torpedo_id="torpedo_id" torpedo_state="torpedo_state"/>
                <IfThenElse>
                    <Condition ID="IsTorpedoError" torpedo_state="{torpedo_state}"/>
                    <Action ID="Error" message="Failed to fire torpedo {torpedo_id}!"/>
                    <Action ID="Info" message="Successfully fired torpedo {torpedo_id}"/>
                </IfThenElse>
            </Sequence>
            <Action ID="Error" message="Failed to fire torpedo {torpedo_id}!"/>
        </Fallback>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="GetActuatorStates">
        <Fallback>
            <Decorator ID="RetryUntilSuccessfulOrTimeout" num_seconds="7">
                <Sequence>
                    <Action ID="GetActuatorStatus" claw_state="{claw_state}" dropper1_state="{dropper1_state}" dropper2_state="{dropper2_state}" torpedo1_state="{torpedo1_state}" torpedo2_state="{torpedo2_state}"/>
                </Sequence>
            </Decorator>
            <ForceFailure>
                <Action ID="Error" message="Failed to get actuator states!"/>
            </ForceFailure>
        </Fallback>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="GetTorpedoState">
        <Sequence>
            <SubTree ID="GetActuatorStates" __shared_blackboard="true"/>
            <IfThenElse name="Choose appropriate torpedo">
                <Condition ID="NumsEqual" a="1" b="{torpedo_id}"/>
                <SetBlackboard name="choose torpedo 1" output_key="torpedo_state" value="{torpedo1_state}"/>
                <SetBlackboard name="choose torpedo 2" output_key="torpedo_state" value="{torpedo2_state}"/>
            </IfThenElse>
            <ForceSuccess>
                <Sequence>
                    <Condition ID="IsTorpedoError" torpedo_state="{torpedo_state}"/>
                    <Action ID="Error" message="Torpedo {torpedo_id} is in an error state!"/>
                </Sequence>
            </ForceSuccess>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="OpenClaw">
        <Fallback>
            <Sequence>
                <Decorator ID="RetryUntilSuccessfulOrTimeout" name="Wait for claw to open" num_seconds="7">
                    <Sequence>
                        <Action ID="Wait" seconds="1"/>
                        <Action ID="Info" message="Attempting to open claw..."/>
                        <Action ID="Actuate" arm_torpedo="" clear_dropper_status="" close_claw="" disarm_torpedo="" drop_1="" drop_2="" fire_torpedo_1="" fire_torpedo_2="" open_claw="1" reset_actuators=""/>
                        <SubTree ID="GetActuatorStates" __shared_blackboard="true"/>
                        <Fallback name="Check if claw is in error state">
                            <Inverter>
                                <Condition ID="IsClawError" claw_state="{claw_state}"/>
                            </Inverter>
                            <ForceFailure>
                                <Action ID="Error" message="Claw is in error state!"/>
                            </ForceFailure>
                        </Fallback>
                        <Condition ID="IsClawOpen" claw_state="{claw_state}"/>
                    </Sequence>
                </Decorator>
                <Action ID="Info" message="Claw opened."/>
            </Sequence>
            <ForceFailure name="Forces subtree to fail">
                <Action ID="Error" message="Failed to open claw!"/>
            </ForceFailure>
        </Fallback>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="WaitForTorpedoCharged">
        <Sequence>
            <Action ID="Info" message="Waiting for torpedo {torpedo_id} to charge."/>
            <SetBlackboard name="Set &quot;1&quot;" output_key="1" value="1"/>
            <Decorator ID="RetryUntilSuccessfulOrTimeout" name="Wait until charged or error" num_seconds="30">
                <Sequence>
                    <Action ID="Wait" seconds="1"/>
                    <SubTree ID="GetTorpedoState" __shared_blackboard="false" torpedo_id="torpedo_id" torpedo_state="torpedo_state"/>
                    <Fallback name="assess state">
                        <Condition ID="IsTorpedoCharged" torpedo_state="{torpedo_state}"/>
                        <Condition ID="IsTorpedoError" torpedo_state="{torpedo_state}"/>
                    </Fallback>
                </Sequence>
            </Decorator>
            <SubTree ID="GetTorpedoState" __shared_blackboard="false" torpedo_id="torpedo_id" torpedo_state="torpedo_state"/>
            <Fallback>
                <Condition ID="IsTorpedoCharged" torpedo_state="{torpedo_state}"/>
                <ForceFailure>
                    <Action ID="Error" message="Torpedo {torpedo_id} failed to charge!"/>
                </ForceFailure>
            </Fallback>
            <Action ID="Info" message="Torpedo {torpedo_id} charged."/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <TreeNodesModel>
        <Action ID="Actuate">
            <input_port name="arm_torpedo" type="bool"/>
            <input_port name="clear_dropper_status" type="bool"/>
            <input_port name="close_claw" type="bool"/>
            <input_port name="disarm_torpedo" type="bool"/>
            <input_port name="drop_1" type="bool"/>
            <input_port name="drop_2" type="bool"/>
            <input_port name="fire_torpedo_1" type="bool"/>
            <input_port name="fire_torpedo_2" type="bool"/>
            <input_port name="open_claw" type="bool"/>
            <input_port name="reset_actuators" type="bool"/>
        </Action>
        <SubTree ID="ArmTorpedos"/>
        <SubTree ID="DisarmTorpedos"/>
        <SubTree ID="DropMarker">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="dropper">marker dropper ID. 1 or 2</input_port>
        </SubTree>
        <Action ID="Error">
            <input_port name="message" type="std::string"/>
        </Action>
        <SubTree ID="FireTorpedo">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="torpedo_id"/>
        </SubTree>
        <SubTree ID="GetActuatorStates">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <Action ID="GetActuatorStatus">
            <output_port name="claw_state" type="int"/>
            <output_port name="dropper1_state" type="int"/>
            <output_port name="dropper2_state" type="int"/>
            <output_port name="torpedo1_state" type="int"/>
            <output_port name="torpedo2_state" type="int"/>
        </Action>
        <SubTree ID="GetTorpedoState">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="torpedo_id"/>
            <output_port name="torpedo_state"/>
        </SubTree>
        <Action ID="Info">
            <input_port name="message" type="std::string"/>
        </Action>
        <Condition ID="IsClawClosed">
            <input_port name="claw_state"/>
        </Condition>
        <Condition ID="IsClawError">
            <input_port name="claw_state"/>
        </Condition>
        <Condition ID="IsClawOpen">
            <input_port name="claw_state"/>
        </Condition>
        <Condition ID="IsClawUnknown">
            <input_port name="claw_state"/>
        </Condition>
        <Condition ID="IsDropperDropped">
            <input_port name="dropper_state" type="int"/>
        </Condition>
        <Condition ID="IsDropperError">
            <input_port name="dropper_state" type="int"/>
        </Condition>
        <Condition ID="IsDropperReady">
            <input_port name="dropper_state"/>
        </Condition>
        <Condition ID="IsTorpedoCharged">
            <input_port name="torpedo_state" type="int"/>
        </Condition>
        <Condition ID="IsTorpedoCharging">
            <input_port name="torpedo_state"/>
        </Condition>
        <Condition ID="IsTorpedoDisarmed">
            <input_port name="torpedo_state" type="int"/>
        </Condition>
        <Condition ID="IsTorpedoError">
            <input_port name="torpedo_state" type="int"/>
        </Condition>
        <Condition ID="IsTorpedoFired">
            <input_port name="torpedo_state" type="int"/>
        </Condition>
        <Condition ID="NumsEqual">
            <input_port name="a" type="double"/>
            <input_port name="b" type="double"/>
        </Condition>
        <Decorator ID="RetryUntilSuccessfulOrTimeout">
            <input_port name="num_seconds" type="double"/>
        </Decorator>
        <Action ID="Search">
            <input_port name="frame">The frame to search for</input_port>
            <input_port name="target_error">The goal amount of error for the state to succeed.</input_port>
            <input_port name="update_sec">How much time to wait for update</input_port>
        </Action>
        <Action ID="ToString">
            <input_port name="double_in">optional. use if value is a double</input_port>
            <input_port name="int_in">optional. use if value is a string</input_port>
            <output_port name="str_out">output.</output_port>
        </Action>
        <Action ID="Wait">
            <input_port name="seconds" type="double"/>
        </Action>
        <SubTree ID="WaitForTorpedoCharged">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="torpedo_id"/>
        </SubTree>
    </TreeNodesModel>
    <!-- ////////// -->
</root>

